{"version":3,"sources":["reducer.js","components/LineChart.js","pages/Overview.js","pages/Details.js","App.js","actions/const.js","actions/global.js","index.js"],"names":["INITIAL_STATE","dateRange","global","cases","deaths","filteredCountries","logScale","unitedStates","LineChart","data","yScale","type","base","max","min","gridYValues","undefined","axisLeftTickValues","maxWidth","margin","top","right","bottom","left","xScale","format","precision","xFormat","axisBottom","orient","tickSize","tickPadding","tickRotation","tickValues","axisLeft","isInteractive","useMesh","enableGridX","enableSlices","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","connect","countries","props","filteredData","map","country","Object","values","series","value","index","split","m","d","year","x","y","id","height","onClick","dispatch","Details","App","basename","to","exact","path","component","Overview","GLOBAL_CASES_URL","parseRow","row","slice","parseInt","combineRowsByCountry","accum","prevValue","nextValue","addArray","xs","ys","reduce","store","createStore","state","action","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","document","getElementById","fetch","then","res","text","csv","trim","r","header","rawRows","rows"],"mappings":"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","file":"static/js/main.d8e27ab0.chunk.js","sourcesContent":["const INITIAL_STATE = {\n  dateRange: null,\n  global: {\n    cases: null,\n    deaths: null,\n    filteredCountries: ['Italy', 'US', 'Australia', 'Singapore', 'France', 'Spain', 'Germany'],\n    logScale: true,\n  },\n  unitedStates: {\n    cases: null,\n    deaths: null,\n  },\n}\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'FETCHED_DATE_RANGE':\n      return {\n        ...state,\n        dateRange: action.dateRange\n      };\n\n    case 'FETCHED_GLOBAL_CASES':\n      return {\n        ...state,\n        global: {\n          ...state.global,\n          cases: action.values\n        }\n      }\n\n    case 'TOGGLE_GLOBAL_LOG_SCALE':\n      return {\n        ...state,\n        global: {\n          ...state.global,\n          logScale: !state.global.logScale\n        }\n      }\n\n    default: return state;\n  }\n}\n","import React from 'react';\nimport { ResponsiveLine } from '@nivo/line'\n// import { ResponsiveLineCanvas } from '@nivo/line'\n\nfunction LineChart({ data, logScale }) {\n  const yScale = logScale\n    ? { type: 'log', base: 10, max: 300000 }\n    : { type: 'linear', min: 0, max: 'auto' };\n\n  const gridYValues = logScale\n    ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n    : undefined;\n\n  const axisLeftTickValues = logScale\n    ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n    : undefined;\n\n  return (\n    <ResponsiveLine\n        maxWidth={800}\n        data={data}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{\n            type: 'time',\n            format: '%Y-%m-%d',\n            precision: 'day',\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={yScale}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: -66,\n            format: '%b %d',\n            tickValues: 'every week',\n        }}\n        gridYValues={gridYValues}\n        axisLeft={{\n            orient: 'left',\n            tickValues: axisLeftTickValues,\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n        }}\n        isInteractive={true}\n        // colors={{ scheme: 'nivo' }}\n        // pointSize={6}\n        useMesh={true}\n        // enableCrosshair={false}\n        enableGridX={false}\n        // sliceTooltip={(slice) => {\n        //   console.log(slice)\n        //   return <p>foo</p>;\n        // }}\n        enableSlices={'x'}\n        legends={[\n            {\n                anchor: 'right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n  );\n}\n\nexport default LineChart\n","import React from 'react';\nimport { connect } from 'react-redux'\n\nimport LineChart from '../components/LineChart'\n\nfunction Overview(props) {\n  const {countries, cases, dateRange} = props;\n\n  if (!cases) {\n    return <p>loading...</p>\n  }\n\n  const filteredData = countries.map(country => cases[country]);\n  const data = Object.values(filteredData).map(series => {\n    const data = series.values.map((value, index) => {\n      const [m, d, year] = dateRange[index].split('/');\n      // const x = new Date(dateRange[index]);\n      const x = `20${year}-${m}-${d}`;\n\n      const y = value === 0 ? 1 : value;\n\n      return {\n        x,\n        y,\n      }\n    })\n\n    return {\n      id: series.country,\n      data,\n    };\n  });\n\n  const onToggle = () =>\n    props.dispatch({type: 'TOGGLE_GLOBAL_LOG_SCALE'})\n\n  return (\n    <div>\n      <p>General overview of world case growth.</p>\n      <div style={{height: '600px', maxWidth:'900px'}}>\n        <LineChart data={data} logScale={props.logScale} />\n      </div>\n      <button onClick={onToggle}>Toggle Log Scale</button>\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ dateRange, global }) => ({\n  dateRange: dateRange,\n  cases: global.cases,\n  countries: global.filteredCountries,\n  logScale: global.logScale,\n})\n\nexport default connect(mapStateToProps)(Overview);\n// export default Overview;\n","import React from 'react';\n// import { HashRouter, Route, Link } from \"react-router-dom\";\n\n// import './App.css';\n\nfunction Details() {\n  return (\n    <p>Details</p>\n  );\n}\n\nexport default Details;\n","import React from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nimport './App.css';\n\nimport Overview from './pages/Overview';\nimport Details from './pages/Details';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <div>\n        <ul>\n          <li><Link to=\"/\">Overview</Link></li>\n          <li><Link to=\"/details\">Details</Link></li>\n        </ul>\n      <hr />\n      <Route exact path=\"/\" component={Overview} />\n      <Route path=\"/details\" component={Details} />\n      </div>\n   </HashRouter>\n  );\n}\nexport default App;\n","const BASE_URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series';\n\nexport const GLOBAL_CASES_URL = `${BASE_URL}/time_series_covid19_confirmed_global.csv`\n","import {GLOBAL_CASES_URL} from './const';\n\nexport const fetchGlobalCases = () => (dispatch) =>\n  fetch(GLOBAL_CASES_URL)\n    .then(res => res.text())\n    .then(csv => {\n      // Need to split on commas that aren't surrounded in quotes... somehow...\n      const [header, ...rawRows] = csv.trim().split('\\n').map(r => r.split(','));\n      const dateRange = header.slice(4);\n\n      const rows = rawRows\n        .map(parseRow)\n        .reduce(combineRowsByCountry, {});\n\n      dispatch({\n        type: 'FETCHED_DATE_RANGE',\n        dateRange,\n      });\n\n      dispatch({\n        type: 'FETCHED_GLOBAL_CASES',\n        values: rows,\n      });\n    })\n\nconst parseRow = (row) => {\n  // const state = row[0]\n  const country = row[1]\n  // const lat = row[2]\n  // const long = row[3]\n  const values = row.slice(4).map(x => parseInt(x));\n\n  return {country, values};\n};\n\nconst combineRowsByCountry = (accum, row) => {\n  const prevValue = accum[row.country];\n\n  const nextValue = prevValue\n    ? ({\n      country: row.country,\n      values: addArray(prevValue.values, row.values)\n    })\n    : row;\n\n  return {\n    ...accum,\n    [row.country]: nextValue,\n  }\n}\n\n// add two array of ints, up to length of first array\nconst addArray = (xs, ys) => xs.reduce((accum, x, index) =>\n  [...accum, x + ys[index]]\n, [])\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk'\nimport logger from 'redux-logger'\nimport reducer from './reducer'\n\nimport './index.css';\nimport App from './App';\n\nimport {fetchGlobalCases} from './actions/global'\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(\n    thunkMiddleware,\n    logger\n  )\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\nstore.dispatch(fetchGlobalCases())\n"],"sourceRoot":""}