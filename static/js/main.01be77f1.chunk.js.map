{"version":3,"sources":["data-specs/utils.js","data-specs/accessors.js","data-specs/global.js","reducers/global.js","store.js","pages/About.js","propTypes.js","components/LineChart.js","components/RightNav.js","pages/GlobalOverview.js","components/IdSelector.js","pages/LeftNav.js","pages/UnitedStatesOverview.js","components/NavBar.js","App.js","actions/const.js","actions/global.js","index.js"],"names":["spec","withFilters","baseAccessor","reducer","data","fs","filters","filter","id","filteredDeaths","deaths","filteredCases","cases","deathsTimestamp","casesTimestamp","computeDayOverDayChange","map","index","x","y","prev","filterBeforeDate","date","Date","getTime","title","group","label","getData","getUpdatedAt","logScale","normalizeDays","deathData","caseData","find","mortalityData","deathCount","caseCount","toNavSpec","Object","values","keys","reduce","accum","existingPages","pages","updatedPages","INITIAL_STATE","allCountries","Italy","US","UK","Singapore","France","Spain","Germany","chartState","loading","combineReducers","global","state","action","type","country","value","chartId","update","createStore","applyMiddleware","thunkMiddleware","logger","About","ChartData","PropTypes","arrayOf","shape","oneOfType","string","number","filterZeroValues","objectOf","bool","isRequired","LineChart","props","chart","this","renderChart","prevProps","prevState","propChange","deepEqual","stateChange","cutoff","initialData","item","xScale","min","max","yScale","base","xFormat","undefined","toLocaleDateString","month","day","gridYValues","axisBottom","orient","tickSize","tickPadding","tickValues","format","legend","legendOffset","legendPosition","axisLeft","tickRotation","margin","top","right","bottom","left","isInteractive","useMesh","enableGridX","enableSlices","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","setTimeout","setState","React","Component","defaultProps","RightNav","List","key","component","Typography","variant","gutterBottom","paddingLeft","className","Link","color","underline","RouterLink","to","activeClassName","renderContainer","Container","maxWidth","connect","location","dispatch","pathname","split","chartSpec","updatedAt","onControlToggle","timePart","toLocaleTimeString","hour12","hour","minute","datePart","year","marginBottom","textAlign","display","fontStyle","marginTop","FormGroup","row","flexDirection","FormControlLabel","control","Switch","size","checked","onChange","disabled","Paper","padding","height","disableGutters","target","rel","href","groupings","region","countries","CountrySelector","onFilterToggle","filteredIds","subheader","ListSubheader","disableSticky","icon","ListItemIcon","fontSize","ListItem","button","onClick","ListItemText","primary","marginLeft","dense","Left","Drawer","open","PaperProps","width","Divider","marginRight","IdSelector","UnitedStateOverview","filteredCountries","NavBar","AppBar","position","Toolbar","flex","Button","App","basename","LeftNav","exact","path","GlobalOverview","UnitedStatesOverview","BASE_PATH","DEATHS_PATH","CASES_PATH","BASE_DATA_URL","GLOBAL_DEATHS_URL","GLOBAL_CASES_URL","BASE_TIMESTAMP_URL","p","s","replace","params","GLOBAL_DEATHS_TIMESTAMP_URL","GLOBAL_CASES_TIMESTAMP_URL","COLUMNS_TO_DROP","Lat","Long","COLUMNS_TO_MAP","isDateString","isNaN","csvOptions","mapHeaders","header","test","console","warn","mapValues","parseInt","combineRowsById","prevValue","nextValue","acc","createDataAray","fetchGlobalData","url","fetch","then","res","text","parseCsv","csv","fetchTimestamp","json","commit","committer","ReactDOM","render","store","document","getElementById","Promise","all","rows","timestamp"],"mappings":"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","file":"static/js/main.01be77f1.chunk.js","sourcesContent":["export const toNavSpec = (spec) => Object.values(Object.keys(spec).reduce((accum, id) => {\n  const { group, label } = spec[id];\n  const existingPages = accum[group] ? accum[group].pages : [];\n  const updatedPages = [...existingPages, { id, label }];\n\n  return {\n    ...accum,\n    [group]: { group, pages: updatedPages },\n  };\n}, {}));\n\nexport const initialChartState = (spec) => Object.keys(spec).reduce((accum, id) => ({\n  ...accum,\n  // normalizeDays always false for now, allow users to toggle on\n  [id]: { logScale: !!spec[id].logScale, normalizeDays: false },\n}), {});\n","/*\n  Assumes reducer shape of\n  {\n    cases: ChartData,\n    casesTimestamp: string,\n    deaths: ChartData,\n    deathsTimestamp, string,\n    filters: {string: bool}\n  }\n*/\n\n// base accessors\nconst deaths = (reducer) => reducer.deaths;\nconst cases = (reducer) => reducer.cases;\n\n// TODO: reducer should be made generic\nconst filters = (reducer) => reducer.filters;\n\nconst withFilters = (baseAccessor) => (reducer) => {\n  const data = baseAccessor(reducer);\n  const fs = filters(reducer);\n\n  return data.filter(({ id }) => fs[id]);\n};\n\nexport const filteredDeaths = withFilters(deaths);\nexport const filteredCases = withFilters(cases);\n\nexport const deathsTimestamp = (reducer) => reducer.deathsTimestamp;\nexport const casesTimestamp = (reducer) => reducer.casesTimestamp;\n","import {\n  filteredCases, filteredDeaths, deathsTimestamp, casesTimestamp,\n} from './accessors';\n\nconst computeDayOverDayChange = ({ id, data }) => {\n  const changes = data.map(({ x, y }, index) => {\n    const prev = data[index - 1];\n    const change = (index === 0 || prev.y === 0) ? 0 : ((y - prev.y) / prev.y);\n\n    return { x, y: change };\n  });\n\n  return { id, data: changes };\n};\n\nconst filterBeforeDate = (date) => ({ id, data }) => ({\n  id,\n  data: data.filter(({ x }) => x >= new Date(date).getTime()),\n});\n\nconst dayOverDayChangeInCases = (reducer) => filteredCases(reducer).map(computeDayOverDayChange).map(filterBeforeDate('3/5/2020'));\nconst dayOverDayChangeInDeaths = (reducer) => filteredDeaths(reducer).map(computeDayOverDayChange).map(filterBeforeDate('3/5/2020'));\n\nconst mortalityRate = (reducer) => filteredDeaths(reducer).map(({ id, data: deathData }) => {\n  // TODO: inefficient to filter cases every map\n  const caseData = filteredCases(reducer).find((x) => x.id === id).data;\n\n  const mortalityData = deathData.map(({ x, y: deathCount }, index) => {\n    const caseCount = caseData[index].y;\n    const rate = caseCount === 0 ? 0 : deathCount / caseCount;\n    return { x, y: rate };\n  });\n\n  return { id, data: mortalityData };\n}).map(filterBeforeDate('3/5/2020'));\n\nexport const defaultChartId = 'deaths-cumulative';\n\nexport const spec = {\n  // deaths\n  'deaths-cumulative': {\n    title: 'Cumulative Global Deaths',\n    group: 'Deaths',\n    label: 'Cumulative',\n    getData: filteredDeaths,\n    getUpdatedAt: deathsTimestamp,\n    logScale: true,\n    normalizeDays: 10,\n  },\n  'deaths-change-rate': {\n    title: ' Global Deaths Daily Rate of Change',\n    group: 'Deaths',\n    label: 'Rate of Change',\n    getData: dayOverDayChangeInDeaths,\n    getUpdatedAt: deathsTimestamp,\n  },\n\n  // cases\n  'cases-cumulative': {\n    title: 'Cumulative Global Cases',\n    group: 'Cases',\n    label: 'Cumulative',\n    getData: filteredCases,\n    getUpdatedAt: casesTimestamp,\n    logScale: true,\n    normalizeDays: 50,\n  },\n  'cases-change-rate': {\n    title: ' Global Cases Daily Rate of Change',\n    group: 'Cases',\n    label: 'Rate of Change',\n    getData: dayOverDayChangeInCases,\n    getUpdatedAt: casesTimestamp,\n  },\n\n  // other\n  'mortality-rate': {\n    title: 'Mortality Rate',\n    group: 'Other',\n    label: 'Mortality Rate',\n    getData: mortalityRate,\n    // TODO: should really take most recent of the two\n    getUpdatedAt: deathsTimestamp,\n  },\n};\n","import { spec } from '../data-specs/global';\nimport { initialChartState } from '../data-specs/utils';\n\nconst INITIAL_STATE = {\n  cases: null,\n  casesTimestamp: null,\n  deaths: null,\n  deathsTimestamp: null,\n  allCountries: null,\n  filters: {\n    Italy: true,\n    US: true,\n    UK: true,\n    Singapore: true,\n    France: false,\n    Spain: false,\n    Germany: false,\n    'S. Korea': false,\n  },\n  chartState: initialChartState(spec),\n  loading: true, // TODO: use this\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'FETCHED_GLOBAL_CASES':\n      return {\n        ...state,\n        allCountries: action.values.map((x) => x.id),\n        cases: action.values,\n      };\n\n    case 'FETCHED_GLOBAL_DEATHS':\n      return {\n        ...state,\n        deaths: action.values,\n      };\n\n    case 'TOGGLE_COUNTRY_FILTER':\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          [action.country]: !state.filters[action.country],\n        },\n      };\n\n    case 'GLOBAL_FORM_CONTROL_TOGGLE':\n      return {\n        ...state,\n        chartState: {\n          ...state.chartState,\n          [action.value.chartId]: {\n            ...state.chartState[action.value.chartId],\n            ...action.value.update,\n          },\n        },\n      };\n\n    case 'GLOBAL_DATA_LOADED':\n      return {\n        ...state,\n        loading: false,\n      };\n\n    case 'GLOBAL_DEATHS_TIMESTAMP_LOADED':\n      return {\n        ...state,\n        deathsTimestamp: action.value\n      }\n\n    case 'GLOBAL_CASES_TIMESTAMP_LOADED':\n      return {\n        ...state,\n        casesTimestamp: action.value\n      }\n\n    default: return state;\n  }\n};\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport globalReducer from './reducers/global';\n\nconst reducer = combineReducers({\n  global: globalReducer,\n});\n\nexport default createStore(\n  reducer,\n  applyMiddleware(\n    thunkMiddleware,\n    logger,\n  ),\n);\n","import React from 'react';\n\nconst About = () => (\n  <p>About</p>\n);\n\nexport default About;\n","import PropTypes from 'prop-types';\n\nexport const ChartData = PropTypes.arrayOf(\n  PropTypes.shape({\n    x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n);\n\nexport const Reducer = PropTypes.shape({\n  cases: ChartData,\n  deaths: ChartData,\n  filters: PropTypes.objectOf(PropTypes.bool).isRequired,\n  chartState: PropTypes.objectOf(\n    PropTypes.shape({\n      logScale: PropTypes.bool,\n      normalizeDays: PropTypes.bool,\n    }),\n  ).isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport deepEqual from 'deep-equal';\n\nimport { ChartData } from '../propTypes';\n\nconst propTypes = {\n  data: ChartData.isRequired,\n  logScale: PropTypes.bool,\n  normalizeDays: PropTypes.number,\n};\n\nconst defaultProps = {\n  logScale: false,\n  normalizeDays: null,\n};\n\nconst mapNormalizeDays = (cutoff, values) => values.map((item) => {\n  const data = item.data\n    .filter(({ y }) => y >= cutoff)\n    .map(({ y }, index) => ({ x: index, y }));\n\n  return { ...item, data };\n});\n\nconst filterZeroValues = ({ id, data }) => ({\n  id,\n  data: data.filter(({ y }) => y !== 0),\n});\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chart: null,\n    };\n  }\n\n  // A little trickery in these lifecycle methods in order to render the chart\n  // outside of the current render cycle.\n  // Chart is slow and heavy to re-render,\n  // so we want to avoid batching with other updates that should be fast\n  componentDidMount() {\n    this.renderChart();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const propChange = !deepEqual(prevProps, this.props);\n\n    // This is a little sketchy... we need to see if state changed but comparing the\n    // chart would lead to an infitine loop\n    // (because state changes lead to chart changes lead to state changes)\n    // So as a quick fix just remove the chart value for comparision\n    const stateChange = !deepEqual({ ...prevState, chart: null }, { ...this.state, chart: null });\n\n    if (propChange || stateChange) {\n      this.renderChart();\n    }\n  }\n\n  renderChart() {\n    const {\n      data: initialData, logScale, normalizeDays,\n    } = this.props;\n\n    let data = initialData;\n    if (normalizeDays) {\n      data = mapNormalizeDays(normalizeDays, data);\n    }\n\n    if (logScale) {\n      // filter zero values\n      data = data.map(filterZeroValues);\n    }\n\n    const xScale = {\n      type: 'linear',\n      min: normalizeDays ? 0 : 'auto',\n      max: 'auto',\n    };\n\n    const yScale = logScale\n      ? { type: 'log', base: 10, max: 1000000 } // todo find max automatically\n      : { type: 'linear', min: 0, max: 'auto' };\n\n    const xFormat = normalizeDays\n      ? undefined\n      : (x) => new Date(x).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n\n    const gridYValues = logScale\n      ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n      : undefined;\n\n    const axisLeftTickValues = logScale\n      ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n      : undefined;\n\n    const axisBottom = {\n      orient: 'bottom',\n      tickSize: 5,\n      tickPadding: 5,\n      // tickRotation: -66,\n      tickValues: 10,\n      format: xFormat,\n      legend: 'Number of days since Nth case',\n      legendOffset: 36,\n      legendPosition: 'middle',\n    };\n\n    const axisLeft = {\n      orient: 'left',\n      tickValues: axisLeftTickValues,\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'Count',\n      legendOffset: -50,\n      legendPosition: 'middle',\n    };\n\n    const legend = {\n      anchor: 'top-right',\n      direction: 'column',\n      justify: false,\n      translateX: 100,\n      translateY: 0,\n      itemsSpacing: 0,\n      itemDirection: 'left-to-right',\n      itemWidth: 80,\n      itemHeight: 20,\n      itemOpacity: 0.75,\n      symbolSize: 12,\n      symbolShape: 'circle',\n      symbolBorderColor: 'rgba(0, 0, 0, .5)',\n      effects: [{\n        on: 'hover',\n        style: {\n          itemBackground: 'rgba(0, 0, 0, .03)',\n          itemOpacity: 1,\n        },\n      }],\n    };\n\n    const chart = (\n      <ResponsiveLine\n        data={data}\n        margin={{\n          top: 50, right: 110, bottom: 50, left: 60,\n        }}\n        xScale={xScale}\n        yScale={yScale}\n        xFormat={xFormat}\n        axisBottom={axisBottom}\n        gridYValues={gridYValues}\n        axisLeft={axisLeft}\n        isInteractive\n// pointSize={6}\n        useMesh\n        enableGridX={false}\n// sliceTooltip={(slice) => {\n//   console.log(slice)\n//   return <p>foo</p>;\n// }}\n        enableSlices=\"x\"\n        legends={[legend]}\n      />\n    );\n\n    // Render chart into DOM outside of current render cycle\n    setTimeout(() => this.setState({ chart }), 0);\n  }\n\n  render() {\n    const { chart } = this.state;\n\n    return chart;\n  }\n}\n\nLineChart.propTypes = propTypes;\nLineChart.defaultProps = defaultProps;\n\nexport default LineChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink as RouterLink } from 'react-router-dom';\n\nimport List from '@material-ui/core/List';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\n// import ListItemText from '@material-ui/core/ListItemText';\n// import ListSubheader from '@material-ui/core/ListSubheader';\n\nconst propTypes = {\n  spec: PropTypes.arrayOf(\n    PropTypes.shape({\n      group: PropTypes.string.isRequired,\n      pages: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          label: PropTypes.string.isRequired,\n        }),\n      ).isRequired,\n    }),\n  ).isRequired,\n  base: PropTypes.string.isRequired,\n};\n\n// <List component=\"nav\" dense\n//    subheader={<ListSubheader disableSticky component=\"div\">Deaths</ListSubheader>}>\n//   <ListItem button><ListItemText primary=\"Cumulative\" /></ListItem>\n//   <ListItem button><ListItemText primary=\"Daily\" /></ListItem>\n//   <ListItem button><ListItemText primary=\"Rate of Change\" /></ListItem>\n//   <ListItem button><ListItemText primary=\"Per Capita\" /></ListItem>\n// </List>\n// <List component=\"nav\" dense\n//    subheader={<ListSubheader disableSticky component=\"div\">Cases</ListSubheader>}>\n//   <ListItem button><ListItemText primary=\"Cumulative\" /></ListItem>\n//   <ListItem button><ListItemText primary=\"Daily\" /></ListItem>\n//   <ListItem button><ListItemText primary=\"Rate of Change\" /></ListItem>\n//   <ListItem button><ListItemText primary=\"Per Capita\" /></ListItem>\n// </List>\n// <List component=\"nav\" dense\n//    subheader={<ListSubheader disableSticky component=\"div\">Other</ListSubheader>}>\n//   <ListItem button><ListItemText primary=\"Mortality rate\" /></ListItem>\n//   <ListItem button><ListItemText primary=\"Full table\" /></ListItem>\n// </List>\n\nconst RightNav = ({ spec, base }) => (\n  <div id=\"right-nav\">\n    {spec.map(({ group, pages }) => (\n      <List\n        key={group}\n        component=\"nav\"\n      >\n        <Typography variant=\"body1\" gutterBottom style={{ paddingLeft: '12px' }}>{group}</Typography>\n        {pages.map(({ id, label }) => (\n          <li className=\"right-nav-item\" key={id}>\n            <Link\n              color=\"textSecondary\"\n              underline=\"none\"\n              variant=\"body1\"\n              component={RouterLink}\n              to={`${base}/${id}`}\n              activeClassName=\"active\"\n            >\n              {label}\n            </Link>\n          </li>\n        ))}\n      </List>\n    ))}\n  </div>\n);\n\nRightNav.propTypes = propTypes;\n\nexport default RightNav;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nimport LineChart from '../components/LineChart';\nimport RightNav from '../components/RightNav';\n\nimport { Reducer } from '../propTypes';\nimport { spec, defaultChartId } from '../data-specs/global';\nimport { toNavSpec } from '../data-specs/utils';\n\nconst propTypes = {\n  reducer: Reducer.isRequired,\n  location: PropTypes.shape({\n    pathname: PropTypes.string,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nconst getChartId = (pathname) => pathname.split('/')[2] || defaultChartId;\n\nconst renderContainer = (component) => (\n  <div id=\"main-container\">\n    <Container maxWidth=\"md\" id=\"main-content\">\n      {component}\n    </Container>\n    <RightNav base=\"/global\" spec={toNavSpec(spec)} />\n  </div>\n);\n\nconst GlobalOverview = (props) => {\n  const {\n    reducer,\n    location,\n    dispatch,\n  } = props;\n\n  if (reducer.loading) {\n    return renderContainer(<p>Loading...</p>);\n  }\n\n  const chartId = getChartId(location.pathname);\n\n  // TODO: should actually route to default when no match\n  const chartSpec = spec[chartId] || spec[defaultChartId];\n\n  const chartState = reducer.chartState[chartId];\n\n  const data = chartSpec.getData(reducer);\n  const updatedAt = chartSpec.getUpdatedAt(reducer);\n\n  const onControlToggle = (key) => dispatch({\n    type: 'GLOBAL_FORM_CONTROL_TOGGLE',\n    value: { chartId, update: { [key]: !chartState[key] } },\n  });\n\n  const date = new Date(updatedAt);\n\n  const timePart = date.toLocaleTimeString([], { hour12: true, hour: '2-digit', minute: '2-digit' });\n  const datePart = date.toLocaleDateString([], { year: 'numeric', month: 'long', day: 'numeric' });\n\n  return renderContainer(\n    <div>\n      <Typography variant=\"h4\" style={{ marginBottom: '12px', textAlign: 'center' }}>{chartSpec.title}</Typography>\n      <Typography\n        variant=\"caption\"\n        display=\"block\"\n        gutterBottom\n        style={{\n          textAlign: 'center', fontStyle: 'italic', marginBottom: '12px', marginTop: '12px',\n        }}\n      >\n        {`Data as of ${timePart} on ${datePart}.`}\n      </Typography>\n      <FormGroup id=\"chart-toggles\" row style={{ flexDirection: 'row-reverse', marginBottom: '6px' }}>\n        <FormControlLabel\n          control={<Switch size=\"small\" checked={chartState.logScale} onChange={() => onControlToggle('logScale')} />}\n          label=\"Log Scale\"\n          disabled={!chartSpec.logScale}\n        />\n        <FormControlLabel\n          control={<Switch size=\"small\" checked={chartState.normalizeDays} onChange={() => onControlToggle('normalizeDays')} />}\n          label=\"Normalize Days\"\n          disabled={!chartSpec.normalizeDays}\n        />\n      </FormGroup>\n      <Paper\n        variant=\"outlined\"\n        style={{\n          marginTop: '12px',\n          marginBottom: '6px',\n          margin: 'auto',\n          padding: '0 32px 18px',\n        }}\n      >\n        <Container style={{ height: '500px', maxWidth: '800px' }} disableGutters>\n          <LineChart\n            data={data}\n            logScale={chartState.logScale}\n            normalizeDays={chartState.normalizeDays ? chartSpec.normalizeDays : undefined}\n          />\n        </Container>\n      </Paper>\n      <Typography\n        variant=\"caption\"\n        display=\"block\"\n        gutterBottom\n        style={{\n          textAlign: 'center', fontStyle: 'italic', marginBottom: '12px', marginTop: '12px',\n        }}\n      >\n        Source:\n        {' '}\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/CSSEGISandData/COVID-19\">Center for Systems Science and Engineering at Johns Hopkins University</a>\n        .\n      </Typography>\n    </div>,\n  );\n};\n\nGlobalOverview.propTypes = propTypes;\n\nconst mapStateToProps = ({ global }) => ({ reducer: global });\n\nexport default connect(mapStateToProps)(GlobalOverview);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport CheckIcon from '@material-ui/icons/Check';\n\n\nconst propTypes = {\n  // allCountries: PropTypes.arrayOf(PropTypes.string),\n  filteredIds: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onFilterToggle: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  allCountries: null,\n};\n\n// Default groupings\nconst groupings = [\n  {\n    region: 'Americas',\n    countries: ['US', 'Canada', 'Mexico', 'Brazil'],\n  },\n  {\n    region: 'Europe',\n    countries: ['UK', 'Spain', 'France', 'Germany', 'Italy', 'Switzerland', 'Belgium', 'Netherlands'],\n  },\n  {\n    region: 'APAC',\n    countries: ['Singapore', 'Taiwan', 'Japan', 'S. Korea', 'Australia'],\n  },\n];\n\n// TODO: this assumes country toggle only\n// Eventually need to add state toggle\n\nclass CountrySelector extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filteredIds: props.filteredIds,\n    };\n  }\n\n  onFilterToggle = (id) => {\n    const filteredIds = {\n      ...this.state.filteredIds,\n      [id]: !this.state.filteredIds[id],\n    };\n\n    this.setState({\n      filteredIds,\n    }, () => this.props.onFilterToggle(id));\n  }\n\n  render() {\n    const { filteredIds } = this.state;\n\n    const subheader = (region) => <ListSubheader disableSticky component=\"div\">{region}</ListSubheader>;\n\n    const icon = <ListItemIcon><CheckIcon color=\"primary\" fontSize=\"small\" /></ListItemIcon>;\n\n    const item = (id) => (\n      <ListItem key={id} button onClick={() => this.onFilterToggle(id)}>\n        <ListItemText key={id} primary={id} style={{ marginLeft: '24px' }} />\n        {filteredIds[id] ? icon : null}\n      </ListItem>\n    );\n\n    return groupings.map(({ region, countries }) => (\n      <List component=\"nav\" key={region} dense subheader={subheader(region)}>\n        {countries.map(item)}\n      </List>\n    ));\n  }\n}\n\nCountrySelector.propTypes = propTypes;\nCountrySelector.defaultProps = defaultProps;\n\nexport default CountrySelector;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\n\n\nimport PropTypes from 'prop-types';\n\nimport IdSelector from '../components/IdSelector';\n\nconst propTypes = {\n  // allCountries: PropTypes.arrayOf(PropTypes.string),\n  filters: PropTypes.objectOf(PropTypes.bool).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  // allCountries: null,\n};\n\nconst Left = (props) => {\n  const { dispatch, filters } = props;\n\n  // TODO: this assumes country toggle only\n  // Eventually need to add state toggle and swap sets on route\n  const onFilterToggle = (country) => dispatch({\n    type: 'TOGGLE_COUNTRY_FILTER',\n    country,\n  });\n\n  return (\n    <nav id=\"left-nav\">\n      <Drawer\n        variant=\"permanent\"\n        open\n        PaperProps={{ style: { width: '240px' } }}\n      >\n        <Divider style={{ marginTop: '64px', marginRight: '24px' }} />\n        <IdSelector filteredIds={filters} onFilterToggle={onFilterToggle} />\n      </Drawer>\n    </nav>\n  );\n};\n\nLeft.propTypes = propTypes;\nLeft.defaultProps = defaultProps;\n\nconst mapStateToProps = ({ global }) => ({\n  allCountries: global.allCountries,\n  filters: global.filters,\n});\n\nexport default connect(mapStateToProps)(Left);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { ChartData } from '../propTypes';\nimport LineChart from '../components/LineChart';\n\nconst propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.string).isRequired,\n  cases: ChartData,\n  deaths: ChartData,\n};\n\nconst defaultProps = {\n  cases: null,\n  deaths: null,\n};\n\nfunction UnitedStateOverview(props) {\n  return (\n    <p>US overview here</p>\n  );\n}\n\nUnitedStateOverview.propTypes = propTypes;\nUnitedStateOverview.defaultProps = defaultProps;\n\nconst mapStateToProps = ({ global }) => ({\n  cases: global.cases,\n  deaths: global.deaths,\n  countries: global.filteredCountries,\n});\n\nexport default connect(mapStateToProps)(UnitedStateOverview);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst NavBar = () => (\n  <AppBar position=\"fixed\" color=\"default\" id=\"top-nav\">\n    <Toolbar>\n      <Typography variant=\"h6\" style={{ flex: 'auto' }}>Covid Dashboard</Typography>\n      <div>\n        <Button color=\"inherit\" component={Link} to=\"/\">About</Button>\n        <Button color=\"inherit\" component={Link} to=\"/global\">Global</Button>\n        <Button color=\"inherit\" component={Link} to=\"/united-states\">United States</Button>\n      </div>\n    </Toolbar>\n  </AppBar>\n);\n// <Button color=\"inherit\" component={Link} to=\"/experiments\">Experiments</Button>\n\nexport default NavBar;\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport About from './pages/About';\nimport GlobalOverview from './pages/GlobalOverview';\nimport LeftNav from './pages/LeftNav';\nimport UnitedStatesOverview from './pages/UnitedStatesOverview';\n\nimport NavBar from './components/NavBar';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div style={{ display: 'flex' }}>\n        <NavBar />\n        <LeftNav />\n        <Route exact path=\"/\" component={About} />\n        <Route path=\"/global\" component={GlobalOverview} />\n        <Route path=\"/united-states\" component={UnitedStatesOverview} />\n      </div>\n    </HashRouter>\n  );\n}\n\n\nexport default App;\n","const BASE_PATH = 'csse_covid_19_data/csse_covid_19_time_series';\nconst DEATHS_PATH = `${BASE_PATH}/time_series_covid19_deaths_global.csv`;\nconst CASES_PATH = `${BASE_PATH}/time_series_covid19_confirmed_global.csv`;\n\n// data\nconst BASE_DATA_URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master';\n\nexport const GLOBAL_DEATHS_URL = `${BASE_DATA_URL}/${DEATHS_PATH}`;\nexport const GLOBAL_CASES_URL = `${BASE_DATA_URL}/${CASES_PATH}`;\n\n// timestamps\nconst BASE_TIMESTAMP_URL = 'https://api.github.com/repos/CSSEGISandData/COVID-19/commits';\n\nconst p = (s) => s.replace(/\\//g, '%2F');\nconst params = 'page=1&per_page=1&ref=master';\n\nexport const GLOBAL_DEATHS_TIMESTAMP_URL = `${BASE_TIMESTAMP_URL}?path=${p(DEATHS_PATH)}&${params}`;\nexport const GLOBAL_CASES_TIMESTAMP_URL = `${BASE_TIMESTAMP_URL}?path=${p(CASES_PATH)}&${params}`;\n// https://api.github.com/repos/CSSEGISandData/COVID-19/commits?path=csse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv&page=1&per_page=1&ref=master\n","import parseCsv from 'neat-csv';\nimport {\n  GLOBAL_CASES_URL, GLOBAL_DEATHS_URL, GLOBAL_DEATHS_TIMESTAMP_URL, GLOBAL_CASES_TIMESTAMP_URL,\n} from './const';\n\nconst COLUMNS_TO_DROP = {\n  'Province/State': true,\n  Lat: true,\n  Long: true,\n};\n\nconst COLUMNS_TO_MAP = {\n  'Country/Region': 'id',\n};\n\nconst isDateString = (s) => !isNaN(s);\n// const isDateString = (s) => /\\d{4}-\\d{1,2}-\\d{1,2}/.test(s);\n\nconst csvOptions = ({\n  mapHeaders: ({ header, index }) => { // eslint-disable-line no-unused-vars\n    if (COLUMNS_TO_DROP[header]) return null;\n    if (COLUMNS_TO_MAP[header]) return COLUMNS_TO_MAP[header];\n\n    // m/d/y where month and day can be one or two digits\n    if (/\\d{1,2}\\/\\d{1,2}\\/\\d{2}/.test(header)) {\n      // const [m, d, year] = header.split('/');\n      // TODO: pad month and day to two digits?\n      return new Date(header).getTime();\n    }\n\n    console.warn('Header not transformed:', header); // eslint-disable-line no-console\n\n    return header;\n  },\n  mapValues: ({ header, index, value }) => { // eslint-disable-line no-unused-vars\n    if (isDateString(header)) return parseInt(value, 10);\n\n    if (header === 'id') {\n      switch (value) {\n        case 'Korea, South': return 'S. Korea';\n        case 'Taiwan*': return 'Taiwan';\n        case 'United Kingdom': return 'UK';\n\n        default: return value;\n      }\n    }\n\n    return value;\n  },\n});\n\nconst combineRowsById = (accum, row) => {\n  const prevValue = accum[row.id] || {};\n\n  const dateKeys = Object.keys(row).filter(isDateString);\n\n  const nextValue = dateKeys.reduce((acc, key) => ({\n    ...acc,\n    [key]: row[key] + (prevValue[key] || 0),\n  }), { id: row.id });\n\n  return {\n    ...accum,\n    [row.id]: nextValue,\n  };\n};\n\nconst createDataAray = (row) => {\n  const dateKeys = Object.keys(row).filter(isDateString);\n\n  const data = dateKeys.map((key) => ({\n    x: key,\n    y: row[key],\n  }), []);\n\n  return { id: row.id, data };\n};\n\nconst fetchGlobalData = (url) => fetch(url)\n  .then((res) => res.text())\n  .then((x) => parseCsv(x, csvOptions))\n  .then((csv) => Object.values(csv.reduce(combineRowsById, {}))\n    .map(createDataAray));\n\nexport const fetchGlobalCases = () => (dispatch) => fetchGlobalData(GLOBAL_CASES_URL)\n  .then((rows) => dispatch({\n    type: 'FETCHED_GLOBAL_CASES',\n    values: rows,\n  }));\n\n\nexport const fetchGlobalDeaths = () => (dispatch) => fetchGlobalData(GLOBAL_DEATHS_URL)\n  .then((rows) => dispatch({\n    type: 'FETCHED_GLOBAL_DEATHS',\n    values: rows,\n  }));\n\nconst fetchTimestamp = (url) => fetch(url)\n  .then((res) => res.json())\n  .then((res) => (res[0] ? res[0].commit.committer.date : null));\n\nexport const fetchGlobalDeathsTimestamp = () => (dispatch) => fetchTimestamp(GLOBAL_DEATHS_TIMESTAMP_URL)\n  .then((timestamp) => dispatch({\n    type: 'GLOBAL_DEATHS_TIMESTAMP_LOADED',\n    value: timestamp,\n  }));\n\nexport const fetchGlobalCasesTimestamp = () => (dispatch) => fetchTimestamp(GLOBAL_CASES_TIMESTAMP_URL)\n  .then((timestamp) => dispatch({\n    type: 'GLOBAL_CASES_TIMESTAMP_LOADED',\n    value: timestamp,\n  }));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nimport './index.css';\n\nimport {\n  fetchGlobalCases, fetchGlobalDeaths, fetchGlobalDeathsTimestamp, fetchGlobalCasesTimestamp,\n} from './actions/global';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nPromise.all([\n  store.dispatch(fetchGlobalCases()),\n  store.dispatch(fetchGlobalDeaths()),\n  store.dispatch(fetchGlobalDeathsTimestamp()),\n  store.dispatch(fetchGlobalCasesTimestamp()),\n]).then(() => store.dispatch({\n  type: 'GLOBAL_DATA_LOADED',\n}));\n"],"sourceRoot":""}