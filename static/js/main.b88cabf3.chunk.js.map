{"version":3,"sources":["reducers/global.js","store.js","propTypes.js","components/LineChart.js","pages/GlobalOverview.js","pages/UnitedStatesOverview.js","components/IdSelector.js","components/NavBar.js","App.js","actions/const.js","actions/global.js","index.js"],"names":["INITIAL_STATE","cases","deaths","allCountries","filteredCountries","Italy","US","UK","Singapore","France","Spain","Germany","reducer","combineReducers","global","state","action","type","values","map","x","id","country","createStore","applyMiddleware","thunkMiddleware","logger","PropTypes","arrayOf","shape","oneOfType","string","number","y","filterZeroValues","data","filter","LineChart","props","enableLogScale","enableNormalizeDays","onLogScaleToggle","logScale","setState","onNormalizeDaysToggle","normalizeDays","cutoff","this","title","description","updatedAt","size","initialData","item","index","dimension","height","maxWidth","xScale","min","max","yScale","base","xFormat","undefined","Date","toLocaleDateString","month","day","gridYValues","axisBottom","orient","tickSize","tickPadding","tickValues","format","legend","legendOffset","legendPosition","axisLeft","tickRotation","noop","logScaleButton","ButtonGroup","variant","color","aria-label","Button","style","textDecoration","onClick","normalizeDaysButton","Container","disableGutters","marginTop","marginBottom","Typography","gutterBottom","display","textAlign","fontStyle","Paper","margin","top","right","bottom","left","isInteractive","useMesh","enableGridX","enableSlices","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","Grid","container","spacing","React","Component","defaultProps","computeDayOverDayChange","prev","filterBeforeDate","date","getTime","GlobalOverview","filteredCases","filteredDeaths","dayOverDayChangeInCases","dayOverDayChangeInDeaths","mortalityRate","deathData","caseData","find","mortalityData","deathCount","caseCount","connect","UnitedStateOverview","countries","groupings","region","CountrySelector","onFilterToggle","defaultGroupings","FormControl","component","key","FormLabel","FormGroup","checkbox","Checkbox","checked","name","onChange","FormControlLabel","control","label","ExpansionPanel","elevation","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","NavBar","dispatch","AppBar","position","Toolbar","flex","Link","to","IdSelector","App","basename","exact","path","UnitedStatesOverview","BASE_URL","GLOBAL_CASES_URL","GLOBAL_DEATHS_URL","COLUMNS_TO_DROP","Lat","Long","COLUMNS_TO_MAP","isDateString","s","isNaN","csvOptions","mapHeaders","header","test","console","warn","mapValues","value","parseInt","combineRowsById","accum","row","prevValue","nextValue","Object","keys","reduce","acc","createDataAray","fetchGlobalData","url","fetch","then","res","text","parseCsv","csv","ReactDOM","render","store","document","getElementById","rows"],"mappings":"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","file":"static/js/main.b88cabf3.chunk.js","sourcesContent":["const INITIAL_STATE = {\n  cases: null,\n  deaths: null,\n  allCountries: null,\n  filteredCountries: {\n    Italy: true,\n    US: true,\n    UK: true,\n    Singapore: true,\n    France: false,\n    Spain: true,\n    Germany: false,\n    'S. Korea': true,\n  },\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'FETCHED_GLOBAL_CASES':\n      return {\n        ...state,\n        allCountries: action.values.map((x) => x.id),\n        cases: action.values,\n      };\n\n    case 'FETCHED_GLOBAL_DEATHS':\n      return {\n        ...state,\n        deaths: action.values,\n      };\n\n\n    case 'TOGGLE_COUNTRY_FILTER':\n      return {\n        ...state,\n        filteredCountries: {\n          ...state.filteredCountries,\n          [action.country]: !state.filteredCountries[action.country],\n        },\n      };\n\n    default: return state;\n  }\n};\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport globalReducer from './reducers/global';\n\nconst reducer = combineReducers({\n  global: globalReducer,\n});\n\nexport default createStore(\n  reducer,\n  applyMiddleware(\n    thunkMiddleware,\n    logger,\n  ),\n);\n","import PropTypes from 'prop-types';\n\nexport const ChartData = PropTypes.arrayOf(\n  PropTypes.shape({\n    x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ResponsiveLine } from '@nivo/line';\nimport {\n  Container, Paper, Button, ButtonGroup, Grid, Typography,\n} from '@material-ui/core';\n\nimport { ChartData } from '../propTypes';\n\nconst propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  updatedAt: PropTypes.number.isRequired,\n  size: PropTypes.oneOf(['small', 'large']).isRequired,\n  data: ChartData.isRequired,\n  enableLogScale: PropTypes.bool,\n  enableNormalizeDays: PropTypes.number,\n};\n\nconst defaultProps = {\n  title: null,\n  description: null,\n  enableLogScale: false,\n  enableNormalizeDays: null,\n};\n\nconst mapNormalizeDays = (cutoff, values) => values.map((item) => {\n  const data = item.data\n    .filter(({ y }) => y >= cutoff)\n    .map(({ y }, index) => ({ x: index, y }));\n\n  return { ...item, data };\n});\n\nconst filterZeroValues = ({ id, data }) => ({\n  id,\n  data: data.filter(({ y }) => y !== 0),\n});\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    const { enableLogScale, enableNormalizeDays } = props;\n    super(props);\n\n    this.state = {\n      logScale: enableLogScale,\n      normalizeDays: !!enableNormalizeDays,\n    };\n  }\n\n  onLogScaleToggle = () => {\n    const { logScale } = this.state;\n\n    this.setState({\n      logScale: !logScale,\n    });\n  }\n\n  onNormalizeDaysToggle = () => {\n    const { normalizeDays } = this.state;\n\n    this.setState({\n      normalizeDays: !normalizeDays,\n    });\n  }\n\n  render() {\n    const {\n      title, description, updatedAt, size, data: initialData, enableLogScale, enableNormalizeDays,\n    } = this.props;\n\n    const { logScale, normalizeDays } = this.state;\n\n    let data = initialData;\n    if (normalizeDays) {\n      data = mapNormalizeDays(enableNormalizeDays, data);\n    }\n\n    if (logScale) {\n      // filter zero values\n      data = data.map(filterZeroValues);\n    }\n\n    const dimension = size === 'large'\n      ? { height: '500px', maxWidth: '800px' }\n      : { height: '300px', maxWidth: '500px' };\n\n    const xScale = {\n      type: 'linear',\n      min: normalizeDays ? 0 : 'auto',\n      max: 'auto',\n    };\n\n    const yScale = logScale\n      ? { type: 'log', base: 10, max: 300000 } // todo find max automatically\n      : { type: 'linear', min: 0, max: 'auto' };\n\n    const xFormat = normalizeDays\n      ? undefined\n      : (x) => new Date(x).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n\n    const gridYValues = logScale\n      ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n      : undefined;\n\n    const axisLeftTickValues = logScale\n      ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n      : undefined;\n\n    const axisBottom = {\n      orient: 'bottom',\n      tickSize: 5,\n      tickPadding: 5,\n      // tickRotation: -66,\n      tickValues: 10,\n      format: xFormat,\n      legend: 'Number of days since Nth case',\n      legendOffset: 36,\n      legendPosition: 'middle',\n    };\n\n    const axisLeft = {\n      orient: 'left',\n      tickValues: axisLeftTickValues,\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'Count',\n      legendOffset: -50,\n      legendPosition: 'middle',\n    };\n\n    const legend = {\n      anchor: 'top-right',\n      direction: 'column',\n      justify: false,\n      translateX: 100,\n      translateY: 0,\n      itemsSpacing: 0,\n      itemDirection: 'left-to-right',\n      itemWidth: 80,\n      itemHeight: 20,\n      itemOpacity: 0.75,\n      symbolSize: 12,\n      symbolShape: 'circle',\n      symbolBorderColor: 'rgba(0, 0, 0, .5)',\n      effects: [{\n        on: 'hover',\n        style: {\n          itemBackground: 'rgba(0, 0, 0, .03)',\n          itemOpacity: 1,\n        },\n      }],\n    };\n\n    const noop = () => {};\n\n    const logScaleButton = enableLogScale\n      ? (\n        <ButtonGroup variant=\"text\" size=\"small\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button style={{ textDecoration: logScale ? 'underline' : null }} onClick={logScale ? noop : this.onLogScaleToggle}>Log scale</Button>\n          <Button style={{ textDecoration: logScale ? null : 'underline' }} onClick={logScale ? this.onLogScaleToggle : noop}>Linear scale</Button>\n        </ButtonGroup>\n      )\n      : null;\n\n    const normalizeDaysButton = enableNormalizeDays\n      ? (\n        <ButtonGroup variant=\"text\" size=\"small\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button style={{ textDecoration: normalizeDays ? 'underline' : null }} onClick={normalizeDays ? noop : this.onNormalizeDaysToggle}>\n            Normalized days\n          </Button>\n          <Button style={{ textDecoration: normalizeDays ? null : 'underline' }} onClick={normalizeDays ? this.onNormalizeDaysToggle : noop}>\n            Absolute timeline\n          </Button>\n        </ButtonGroup>\n      )\n      : null;\n\n\n    return (\n      <Container size=\"md\" disableGutters style={{ marginTop: '12px', marginBottom: '48px' }}>\n        {title ? <Typography variant=\"h2\" gutterBottom>{title}</Typography> : null}\n        {description ? <Typography variant=\"body2\" gutterBottom>{description}</Typography> : null}\n        <Typography\n          variant=\"caption\"\n          display=\"block\"\n          gutterBottom\n          style={{\n            textAlign: 'center', fontStyle: 'italic', marginBottom: '12px', marginTop: '6px',\n          }}\n        >\n          Data last updated at\n          {' '}\n          {new Date(updatedAt).toLocaleDateString()}\n          .\n        </Typography>\n\n        <Paper style={{\n          marginTop: '12px', marginBottom: '6px', margin: 'auto', ...(size === 'small' ? dimension : {}),\n        }}\n        >\n          <Container style={dimension} disableGutters>\n            <ResponsiveLine\n              data={data}\n              margin={{\n                top: 50, right: 110, bottom: 50, left: 60,\n              }}\n              xScale={xScale}\n              yScale={yScale}\n              xFormat={xFormat}\n              axisBottom={axisBottom}\n              gridYValues={gridYValues}\n              axisLeft={axisLeft}\n              isInteractive\n    // pointSize={6}\n              useMesh\n              enableGridX={false}\n    // sliceTooltip={(slice) => {\n    //   console.log(slice)\n    //   return <p>foo</p>;\n    // }}\n              enableSlices=\"x\"\n              legends={[legend]}\n            />\n          </Container>\n        </Paper>\n        <Grid container justify=\"space-between\" spacing={8}>\n          <Grid item>{logScaleButton}</Grid>\n          <Grid item>{normalizeDaysButton}</Grid>\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nLineChart.propTypes = propTypes;\nLineChart.defaultProps = defaultProps;\n\nexport default LineChart;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@material-ui/core';\n\n\nimport { ChartData } from '../propTypes';\nimport LineChart from '../components/LineChart';\n\n\nconst propTypes = {\n  filteredCountries: PropTypes.objectOf(PropTypes.bool).isRequired,\n  cases: ChartData,\n  deaths: ChartData,\n  // dispatch: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  cases: null,\n  deaths: null,\n};\n\nconst computeDayOverDayChange = ({ id, data }) => {\n  const changes = data.map(({ x, y }, index) => {\n    const prev = data[index - 1];\n    const change = (index === 0 || prev.y === 0) ? 0 : ((y - prev.y) / prev.y);\n\n    return { x, y: change };\n  });\n\n  return { id, data: changes };\n};\n\nconst filterBeforeDate = (date) => ({ id, data }) => ({\n  id,\n  data: data.filter(({ x }) => x >= new Date(date).getTime()),\n});\n\nfunction GlobalOverview(props) {\n  const {\n    filteredCountries, cases, deaths,\n  } = props;\n\n  if (!cases || !deaths) {\n    return <p>loading...</p>;\n  }\n\n  const filteredCases = cases.filter(({ id }) => filteredCountries[id]);\n  const filteredDeaths = deaths.filter(({ id }) => filteredCountries[id]);\n\n  const dayOverDayChangeInCases = filteredCases.map(computeDayOverDayChange).map(filterBeforeDate('3/5/2020'));\n  const dayOverDayChangeInDeaths = filteredDeaths.map(computeDayOverDayChange).map(filterBeforeDate('3/5/2020'));\n\n  const mortalityRate = filteredDeaths.map(({ id, data: deathData }) => {\n    const caseData = filteredCases.find((x) => x.id === id).data;\n\n    const mortalityData = deathData.map(({ x, y: deathCount }, index) => {\n      const caseCount = caseData[index].y;\n      const rate = caseCount === 0 ? 0 : deathCount / caseCount;\n      return { x, y: rate };\n    });\n\n\n    return { id, data: mortalityData };\n  }).map(filterBeforeDate('3/5/2020'));\n\n  return (\n    <div>\n      <LineChart\n        title=\"Global Cases\"\n        updatedAt={new Date('4/1/2020').getTime()}\n        size=\"large\"\n        data={filteredCases}\n        enableLogScale\n        enableNormalizeDays={50}\n        description={\n          `Overview of coronavirus cases around the world.\n          This shows at a high level, how quickly the virus has spread globally.\n          It is most useful when viewed on a log scale to see the magnitude of increase,\n          as well as a normalized day series to compare rate across countries.\n          However, a linear scale or an absolute time scale can also show interesting trends.\n          One thing to keep in mind when viewing global case counts\n          is that many countries have different testing standards,\n          as well as capacities. This means that confirmed cases might differ\n          substantially from actual case counts in certain countries.`\n        }\n      />\n\n      <LineChart\n        title=\"Global Deaths\"\n        updatedAt={new Date('4/1/2020').getTime()}\n        size=\"large\"\n        data={filteredDeaths}\n        enableLogScale\n        enableNormalizeDays={10}\n        description={\n          `Overview of coronavirus deaths around the world.\n          This is another view on how the virus has spread around the world.\n          It is likely a much more lagging indicator than global cases\n          (possibly on the order of 1-2 weeks), but also might offer a slightly less biased\n          view on impact per region, as deaths are more likely to be\n          accurately tracked than overall cases.`\n        }\n      />\n\n      <Typography variant=\"h2\" gutterBottom>Day Overy Day Changes</Typography>\n      <Typography variant=\"body2\" gutterBottom>\n        Rate change from previous day. Potentially noisy on a day-by-day basis but useful\n        to get a sense of directional trends. Lines converging on 10% day-over-day growth\n        means cases or deaths double roughly every week. Lines converging on 20% 10%\n        day-over-day growth means cases or deaths double roughly every 3-4 days.\n        Note: only shows data after March 5th.\n      </Typography>\n      <div>\n        <LineChart size=\"small\" updatedAt={new Date('4/1/2020').getTime()} data={dayOverDayChangeInCases} />\n        <LineChart size=\"small\" updatedAt={new Date('4/1/2020').getTime()} data={dayOverDayChangeInDeaths} />\n      </div>\n\n      <LineChart\n        title=\"Mortality Rate\"\n        updatedAt={new Date('4/1/2020').getTime()}\n        size=\"large\"\n        data={mortalityRate}\n        description={\n          `Cumulative total mortality rate by day, defined as cumulative deaths over cases per country.\n          A spike upwards could indicate either medical failures or reduced testing capacity,\n          while a spike downwards could indicate increased medical capacity or increased testing.\n          Note: only shows data after March 5th.`\n        }\n      />\n    </div>\n  );\n}\n\nGlobalOverview.propTypes = propTypes;\nGlobalOverview.defaultProps = defaultProps;\n\nconst mapStateToProps = ({ global }) => ({\n  cases: global.cases,\n  deaths: global.deaths,\n  filteredCountries: global.filteredCountries,\n});\n\nexport default connect(mapStateToProps)(GlobalOverview);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { ChartData } from '../propTypes';\nimport LineChart from '../components/LineChart';\n\nconst propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.string).isRequired,\n  cases: ChartData,\n  deaths: ChartData,\n};\n\nconst defaultProps = {\n  cases: null,\n  deaths: null,\n};\n\nfunction UnitedStateOverview(props) {\n  return (\n    <p>US overview here</p>\n  );\n}\n\nUnitedStateOverview.propTypes = propTypes;\nUnitedStateOverview.defaultProps = defaultProps;\n\nconst mapStateToProps = ({ global }) => ({\n  cases: global.cases,\n  deaths: global.deaths,\n  countries: global.filteredCountries,\n});\n\nexport default connect(mapStateToProps)(UnitedStateOverview);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n// import FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst propTypes = {\n  allCountries: PropTypes.arrayOf(PropTypes.string),\n  filteredCountries: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onFilterToggle: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  allCountries: null,\n};\n\n// Default groupings\nconst groupings = [\n  {\n    region: 'Americas',\n    countries: ['US', 'Canada', 'Mexico', 'Brazil'],\n  },\n  {\n    region: 'Europe',\n    countries: ['UK', 'Spain', 'France', 'Germany'],\n  },\n  {\n    region: 'Europe',\n    countries: ['Italy', 'Switzerland', 'Belgium', 'Netherlands'],\n  },\n  {\n    region: 'APAC',\n    countries: ['Singapore', 'Taiwan', 'Japan', 'S. Korea', 'Australia'],\n  },\n];\n\n// TODO: this assumes country toggle only\n// Eventually need to add state toggle\nfunction CountrySelector({ allCountries, filteredCountries, onFilterToggle }) {\n  // todo: add a search bar for all countries or something\n\n  const defaultGroupings = groupings.map(({ region, countries }) => (\n    <FormControl component=\"fieldset\" key={region} margin=\"dense\" size=\"small\">\n      <FormLabel component=\"legend\">{region}</FormLabel>\n      <FormGroup>\n        {countries.map((country) => {\n          const checkbox = (\n            <Checkbox\n              checked={filteredCountries[country]}\n              size=\"small\"\n              name={country}\n              color=\"primary\"\n              onChange={() => onFilterToggle(country)}\n            />\n          );\n\n          return <FormControlLabel key={country} control={checkbox} label={country} />;\n        })}\n      </FormGroup>\n    </FormControl>\n  ));\n\n  return (\n    <ExpansionPanel elevation=\"0\">\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography variant=\"body1\">Select countries...</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        {defaultGroupings}\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n\n  );\n}\n\nCountrySelector.propTypes = propTypes;\nCountrySelector.defaultProps = defaultProps;\n\nexport default CountrySelector;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n  AppBar, Toolbar, Button, Typography,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nimport IdSelector from './IdSelector';\n\nconst propTypes = {\n  allCountries: PropTypes.arrayOf(PropTypes.string),\n  filteredCountries: PropTypes.objectOf(PropTypes.bool).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  allCountries: null,\n};\n\nconst NavBar = (props) => {\n  const { dispatch, filteredCountries, allCountries } = props;\n\n  // TODO: this assumes country toggle only\n  // Eventually need to add state toggle and swap sets on route\n  const onFilterToggle = (country) => dispatch({\n    type: 'TOGGLE_COUNTRY_FILTER',\n    country,\n  });\n\n  return (\n    <AppBar position=\"sticky\" color=\"default\">\n      <Toolbar>\n        <Typography variant=\"h6\" style={{ flex: 'auto' }}>Covid Dashboard</Typography>\n        <div>\n          <Button color=\"inherit\" component={Link} to=\"/\">Global</Button>\n          <Button color=\"inherit\" component={Link} to=\"/united-states\">United States</Button>\n        </div>\n      </Toolbar>\n      <IdSelector\n        filteredCountries={filteredCountries}\n        allCountries={allCountries}\n        onFilterToggle={onFilterToggle}\n      />\n    </AppBar>\n  );\n};\n\nNavBar.propTypes = propTypes;\nNavBar.defaultProps = defaultProps;\n\nconst mapStateToProps = ({ global }) => ({\n  allCountries: global.allCountries,\n  filteredCountries: global.filteredCountries,\n});\n\nexport default connect(mapStateToProps)(NavBar);\n","import React from 'react';\nimport { HashRouter, Route, Link } from 'react-router-dom';\nimport { Container } from '@material-ui/core';\n\nimport './App.css';\n\nimport GlobalOverview from './pages/GlobalOverview';\nimport UnitedStatesOverview from './pages/UnitedStatesOverview';\nimport NavBar from './components/NavBar';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Container maxWidth=\"md\">\n        <NavBar />\n        <Route exact path=\"/\" component={GlobalOverview} />\n        <Route path=\"/united-states\" component={UnitedStatesOverview} />\n      </Container>\n    </HashRouter>\n  );\n}\nexport default App;\n","const BASE_URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series';\n\nexport const GLOBAL_CASES_URL = `${BASE_URL}/time_series_covid19_confirmed_global.csv`;\nexport const GLOBAL_DEATHS_URL = `${BASE_URL}/time_series_covid19_deaths_global.csv`;\n","import parseCsv from 'neat-csv';\nimport { GLOBAL_CASES_URL, GLOBAL_DEATHS_URL } from './const';\n\nconst COLUMNS_TO_DROP = {\n  'Province/State': true,\n  Lat: true,\n  Long: true,\n};\n\nconst COLUMNS_TO_MAP = {\n  'Country/Region': 'id',\n};\n\nconst isDateString = (s) => !isNaN(s);\n// const isDateString = (s) => /\\d{4}-\\d{1,2}-\\d{1,2}/.test(s);\n\nconst csvOptions = ({\n  mapHeaders: ({ header, index }) => { // eslint-disable-line no-unused-vars\n    if (COLUMNS_TO_DROP[header]) return null;\n    if (COLUMNS_TO_MAP[header]) return COLUMNS_TO_MAP[header];\n\n    // m/d/y where month and day can be one or two digits\n    if (/\\d{1,2}\\/\\d{1,2}\\/\\d{2}/.test(header)) {\n      // const [m, d, year] = header.split('/');\n      // TODO: pad month and day to two digits?\n      return new Date(header).getTime();\n    }\n\n    console.warn('Header not transformed:', header); // eslint-disable-line no-console\n\n    return header;\n  },\n  mapValues: ({ header, index, value }) => { // eslint-disable-line no-unused-vars\n    if (isDateString(header)) return parseInt(value, 10);\n\n    if (header === 'id') {\n      switch (value) {\n        case 'Korea, South': return 'S. Korea';\n        case 'Taiwan*': return 'Taiwan';\n        case 'United Kingdom': return 'UK';\n\n        default: return value;\n      }\n    }\n\n    return value;\n  },\n});\n\nconst combineRowsById = (accum, row) => {\n  const prevValue = accum[row.id] || {};\n\n  const dateKeys = Object.keys(row).filter(isDateString);\n\n  const nextValue = dateKeys.reduce((acc, key) => ({\n    ...acc,\n    [key]: row[key] + (prevValue[key] || 0),\n  }), { id: row.id });\n\n  return {\n    ...accum,\n    [row.id]: nextValue,\n  };\n};\n\nconst createDataAray = (row) => {\n  const dateKeys = Object.keys(row).filter(isDateString);\n\n  const data = dateKeys.map((key) => ({\n    x: key,\n    y: row[key],\n  }), []);\n\n  return { id: row.id, data };\n};\n\nconst fetchGlobalData = (url) => fetch(url)\n  .then((res) => res.text())\n  .then((x) => parseCsv(x, csvOptions))\n  .then((csv) => Object.values(csv.reduce(combineRowsById, {}))\n    .map(createDataAray));\n\nexport const fetchGlobalCases = () => (dispatch) => fetchGlobalData(GLOBAL_CASES_URL)\n  .then((rows) => dispatch({\n    type: 'FETCHED_GLOBAL_CASES',\n    values: rows,\n  }));\n\nexport const fetchGlobalDeaths = () => (dispatch) => fetchGlobalData(GLOBAL_DEATHS_URL)\n  .then((rows) => dispatch({\n    type: 'FETCHED_GLOBAL_DEATHS',\n    values: rows,\n  }));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport 'typeface-roboto';\nimport './index.css';\n\nimport App from './App';\n\nimport { fetchGlobalCases, fetchGlobalDeaths } from './actions/global';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nstore.dispatch(fetchGlobalCases());\nstore.dispatch(fetchGlobalDeaths());\n"],"sourceRoot":""}