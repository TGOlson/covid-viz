{"version":3,"sources":["reducer.js","components/LineChart.js","pages/GlobalOverview.js","pages/Details.js","App.js","actions/const.js","actions/global.js","index.js"],"names":["INITIAL_STATE","dateRange","global","cases","deaths","filteredCountries","logScale","unitedStates","LineChart","data","yScale","type","base","max","min","gridYValues","undefined","axisLeftTickValues","maxWidth","margin","top","right","bottom","left","xScale","format","precision","xFormat","axisBottom","orient","tickSize","tickPadding","tickRotation","tickValues","axisLeft","isInteractive","useMesh","enableGridX","enableSlices","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","formatData","Object","values","map","series","value","index","split","m","d","year","x","y","filter","id","country","connect","countries","props","filteredCases","filteredDeaths","caseData","deathData","onToggle","dispatch","height","onClick","Details","App","basename","to","exact","path","component","GlobalOverview","BASE_URL","GLOBAL_CASES_URL","GLOBAL_DEATHS_URL","fetchGlobalData","url","fetch","then","res","text","csv","trim","r","header","rawRows","slice","rows","parseRow","reduce","combineRowsByCountry","row","parseInt","accum","prevValue","nextValue","addArray","xs","ys","store","createStore","state","action","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01d60743.chunk.js","sourcesContent":["const INITIAL_STATE = {\n  dateRange: null,\n  global: {\n    cases: null,\n    deaths: null,\n    filteredCountries: ['Italy', 'US', 'United Kingdom', 'Singapore', 'France', 'Spain', 'Germany'],\n    logScale: true,\n  },\n  unitedStates: {\n    cases: null,\n    deaths: null,\n  },\n}\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'FETCHED_DATE_RANGE':\n      return {\n        ...state,\n        dateRange: action.dateRange\n      };\n\n    case 'FETCHED_GLOBAL_CASES':\n      return {\n        ...state,\n        global: {\n          ...state.global,\n          cases: action.values\n        }\n      }\n\n    case 'FETCHED_GLOBAL_DEATHS':\n      return {\n        ...state,\n        global: {\n          ...state.global,\n          deaths: action.values\n        }\n      }\n\n    case 'TOGGLE_GLOBAL_LOG_SCALE':\n      return {\n        ...state,\n        global: {\n          ...state.global,\n          logScale: !state.global.logScale\n        }\n      }\n\n    default: return state;\n  }\n}\n","import React from 'react';\nimport { ResponsiveLine } from '@nivo/line'\n// import { ResponsiveLineCanvas } from '@nivo/line'\n\nfunction LineChart({ data, logScale }) {\n  const yScale = logScale\n    ? { type: 'log', base: 10, max: 300000 }\n    : { type: 'linear', min: 0, max: 'auto' };\n\n  const gridYValues = logScale\n    ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n    : undefined;\n\n  const axisLeftTickValues = logScale\n    ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n    : undefined;\n\n  return (\n    <ResponsiveLine\n        maxWidth={800}\n        data={data}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{\n            type: 'time',\n            format: '%Y-%m-%d',\n            precision: 'day',\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={yScale}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: -66,\n            format: '%b %d',\n            tickValues: 'every week',\n        }}\n        gridYValues={gridYValues}\n        axisLeft={{\n            orient: 'left',\n            tickValues: axisLeftTickValues,\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n        }}\n        isInteractive={true}\n        // colors={{ scheme: 'nivo' }}\n        // pointSize={6}\n        useMesh={true}\n        // enableCrosshair={false}\n        enableGridX={false}\n        // sliceTooltip={(slice) => {\n        //   console.log(slice)\n        //   return <p>foo</p>;\n        // }}\n        enableSlices={'x'}\n        legends={[\n            {\n                anchor: 'right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n  );\n}\n\nexport default LineChart\n","import React from 'react';\nimport { connect } from 'react-redux'\n\nimport LineChart from '../components/LineChart'\n\nconst formatData = (dateRange, data) =>\n  Object.values(data).map(series => {\n    const data = series.values.map((value, index) => {\n      const [m, d, year] = dateRange[index].split('/');\n      // const x = new Date(dateRange[index]);\n      const x = `20${year}-${m}-${d}`;\n\n      if (value === 0) {\n        return null;\n      }\n\n      return {\n        x,\n        y: value,\n      }\n    }).filter(x => x !== null);\n\n    return {\n      id: series.country,\n      data,\n    };\n  });\n\nfunction GlobalOverview(props) {\n  const {countries, cases, deaths, dateRange} = props;\n\n  if (!cases || !deaths) {\n    return <p>loading...</p>\n  }\n\n  const filteredCases = countries.map(country => cases[country]);\n  const filteredDeaths = countries.map(country => deaths[country]);\n\n  const caseData = formatData(dateRange, filteredCases);\n  const deathData = formatData(dateRange, filteredDeaths);\n\n  const onToggle = () =>\n    props.dispatch({type: 'TOGGLE_GLOBAL_LOG_SCALE'})\n\n  return (\n    <div>\n      <h3>Global Cases</h3>\n      <p>Overview of coronavirus cases around the world.</p>\n      <div style={{height: '600px', maxWidth:'900px'}}>\n        <LineChart data={caseData} logScale={props.logScale} />\n      </div>\n      <button onClick={onToggle}>Toggle Log Scale</button>\n\n\n      <h3>Global Deaths</h3>\n      <p>Overview of coronavirus deaths around the world.</p>\n      <div style={{height: '600px', maxWidth:'900px'}}>\n        <LineChart data={deathData} logScale={props.logScale} />\n      </div>\n      <button onClick={onToggle}>Toggle Log Scale</button>\n\n\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ dateRange, global }) => ({\n  dateRange: dateRange,\n  cases: global.cases,\n  deaths: global.deaths,\n  countries: global.filteredCountries,\n  logScale: global.logScale,\n})\n\nexport default connect(mapStateToProps)(GlobalOverview);\n// export default Overview;\n","import React from 'react';\n// import { HashRouter, Route, Link } from \"react-router-dom\";\n\n// import './App.css';\n\nfunction Details() {\n  return (\n    <p>Details</p>\n  );\n}\n\nexport default Details;\n","import React from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nimport './App.css';\n\nimport GlobalOverview from './pages/GlobalOverview';\nimport Details from './pages/Details';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <div>\n        <ul>\n          <li><Link to=\"/\">GlobalOverview</Link></li>\n          <li><Link to=\"/details\">Details</Link></li>\n        </ul>\n      <hr />\n      <Route exact path=\"/\" component={GlobalOverview} />\n      <Route path=\"/details\" component={Details} />\n      </div>\n   </HashRouter>\n  );\n}\nexport default App;\n","const BASE_URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series';\n\nexport const GLOBAL_CASES_URL = `${BASE_URL}/time_series_covid19_confirmed_global.csv`\nexport const GLOBAL_DEATHS_URL = `${BASE_URL}/time_series_covid19_deaths_global.csv`\n","import {GLOBAL_CASES_URL, GLOBAL_DEATHS_URL} from './const';\n\nexport const fetchGlobalCases = () => (dispatch) =>\n  fetchGlobalData(GLOBAL_CASES_URL)\n    .then(({dateRange, rows}) => {\n      dispatch({\n        type: 'FETCHED_DATE_RANGE',\n        dateRange,\n      });\n\n      dispatch({\n        type: 'FETCHED_GLOBAL_CASES',\n        values: rows,\n      });\n    })\n\nexport const fetchGlobalDeaths = () => (dispatch) =>\n  fetchGlobalData(GLOBAL_DEATHS_URL)\n    .then(({rows}) => {\n      dispatch({\n        type: 'FETCHED_GLOBAL_DEATHS',\n        values: rows,\n      });\n    })\n\n\nconst fetchGlobalData = (url) =>\n  fetch(url)\n    .then(res => res.text())\n    .then(csv => {\n      // Need to split on commas that aren't surrounded in quotes... somehow...\n      const [header, ...rawRows] = csv.trim().split('\\n').map(r => r.split(','));\n      const dateRange = header.slice(4);\n\n      const rows = rawRows\n        .map(parseRow)\n        .reduce(combineRowsByCountry, {});\n\n      return {dateRange, rows};\n    });\n\n\nconst parseRow = (row) => {\n  // const state = row[0]\n  const country = row[1]\n  // const lat = row[2]\n  // const long = row[3]\n  const values = row.slice(4).map(x => parseInt(x));\n\n  return {country, values};\n};\n\nconst combineRowsByCountry = (accum, row) => {\n  const prevValue = accum[row.country];\n\n  const nextValue = prevValue\n    ? ({\n      country: row.country,\n      values: addArray(prevValue.values, row.values)\n    })\n    : row;\n\n  return {\n    ...accum,\n    [row.country]: nextValue,\n  }\n}\n\n// add two array of ints, up to length of first array\nconst addArray = (xs, ys) => xs.reduce((accum, x, index) =>\n  [...accum, x + ys[index]]\n, [])\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk'\nimport logger from 'redux-logger'\nimport reducer from './reducer'\n\nimport './index.css';\nimport App from './App';\n\nimport {fetchGlobalCases, fetchGlobalDeaths} from './actions/global'\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(\n    thunkMiddleware,\n    logger\n  )\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\nstore.dispatch(fetchGlobalCases())\nstore.dispatch(fetchGlobalDeaths())\n"],"sourceRoot":""}