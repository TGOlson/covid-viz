{"version":3,"sources":["reducers/global.js","store.js","components/CountrySelector.js","propTypes.js","components/LineChart.js","pages/GlobalStats.js","pages/UnitedStatesStats.js","App.js","actions/const.js","actions/global.js","index.js"],"names":["INITIAL_STATE","cases","deaths","allCountries","filteredCountries","Italy","US","UK","Singapore","France","Spain","Germany","reducer","combineReducers","global","state","action","type","values","map","x","id","country","createStore","applyMiddleware","thunkMiddleware","logger","groupings","PropTypes","arrayOf","shape","oneOfType","string","number","y","region","countries","CountrySelector","onFilterToggle","defaultGroupings","key","onClick","style","display","defaultProps","filterZeroValues","data","filter","LineChart","props","enableLogScale","enableNormalizeDays","onLogScaleToggle","logScale","setState","onNormalizeDaysToggle","normalizeDays","cutoff","this","size","initialData","item","index","dimension","height","maxWidth","xScale","min","max","yScale","base","xFormat","undefined","Date","toLocaleDateString","month","day","gridYValues","axisBottom","orient","tickSize","tickPadding","tickRotation","tickValues","format","axisLeft","logScaleButton","normalizeDaysButton","margin","top","right","bottom","left","isInteractive","useMesh","enableGridX","enableSlices","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","React","Component","computeDayOverDayChange","prev","filterBeforeDate","date","getTime","GlobalOverview","filteredCases","filteredDeaths","dayOverDayChangeInCases","dayOverDayChangeInDeaths","mortalityRate","deathData","caseData","find","mortalityData","deathCount","caseCount","dispatch","connect","includes","App","basename","to","exact","path","component","GlobalStats","UnitedStatesStats","BASE_URL","GLOBAL_CASES_URL","GLOBAL_DEATHS_URL","COLUMNS_TO_DROP","Lat","Long","COLUMNS_TO_MAP","isDateString","s","isNaN","csvOptions","mapHeaders","header","test","console","warn","mapValues","value","parseInt","combineRowsById","accum","row","prevValue","nextValue","Object","keys","reduce","acc","createDataAray","fetchGlobalData","url","fetch","then","res","text","parseCsv","csv","ReactDOM","render","store","document","getElementById","rows"],"mappings":"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","file":"static/js/main.5a49d101.chunk.js","sourcesContent":["const INITIAL_STATE = {\n  cases: null,\n  deaths: null,\n  allCountries: null,\n  filteredCountries: {\n    Italy: true,\n    US: true,\n    UK: true,\n    Singapore: true,\n    France: false,\n    Spain: true,\n    Germany: false,\n    'S. Korea': true,\n  },\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'FETCHED_GLOBAL_CASES':\n      return {\n        ...state,\n        allCountries: action.values.map((x) => x.id),\n        cases: action.values,\n      };\n\n    case 'FETCHED_GLOBAL_DEATHS':\n      return {\n        ...state,\n        deaths: action.values,\n      };\n\n\n    case 'TOGGLE_COUNTRY_FILTER':\n      return {\n        ...state,\n        filteredCountries: {\n          ...state.filteredCountries,\n          [action.country]: !state.filteredCountries[action.country],\n        },\n      };\n\n    default: return state;\n  }\n};\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport globalReducer from './reducers/global';\n\nconst reducer = combineReducers({\n  global: globalReducer,\n});\n\nexport default createStore(\n  reducer,\n  applyMiddleware(\n    thunkMiddleware,\n    logger,\n  ),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  allCountries: PropTypes.arrayOf(PropTypes.string),\n  filteredCountries: PropTypes.objectOf(PropTypes.bool).isRequired,\n  onFilterToggle: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  allCountries: null,\n};\n\n// Default groupings\nconst groupings = [\n  {\n    region: 'Americas',\n    countries: ['US', 'Canada', 'Mexico', 'Brazil'],\n  },\n  {\n    region: 'Europe',\n    countries: ['UK', 'Spain', 'France', 'Germany', 'Italy', 'Switzerland', 'Belgium', 'Netherlands'],\n  },\n  {\n    region: 'APAC',\n    countries: ['Singapore', 'Taiwan', 'Japan', 'S. Korea', 'Australia'],\n  },\n];\n\nfunction CountrySelector({ allCountries, filteredCountries, onFilterToggle }) {\n  if (!allCountries) return <p>loading...</p>;\n\n  const defaultGroupings = groupings.map(({ region, countries }) => (\n    <div key={region}>\n      <h3>{region}</h3>\n      <ul>\n        {countries.map((country) => (\n          <li key={country} onClick={() => onFilterToggle(country)}>\n            {country}\n            {' '}\n            {filteredCountries[country] ? 'X' : ''}\n          </li>\n        ))}\n      </ul>\n    </div>\n  ));\n\n  return (\n    <div style={{ display: 'inline-flex' }}>\n      {defaultGroupings}\n    </div>\n  );\n}\n\nCountrySelector.propTypes = propTypes;\nCountrySelector.defaultProps = defaultProps;\n\nexport default CountrySelector;\n","import PropTypes from 'prop-types';\n\nexport const ChartData = PropTypes.arrayOf(\n  PropTypes.shape({\n    x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport { ChartData } from '../propTypes';\n\nconst propTypes = {\n  size: PropTypes.oneOf(['small', 'large']).isRequired,\n  data: ChartData.isRequired,\n  enableLogScale: PropTypes.bool,\n  enableNormalizeDays: PropTypes.number,\n};\n\nconst defaultProps = {\n  enableLogScale: false,\n  enableNormalizeDays: null,\n};\n\nconst mapNormalizeDays = (cutoff, values) => values.map((item) => {\n  const data = item.data\n    .filter(({ y }) => y >= cutoff)\n    .map(({ y }, index) => ({ x: index, y }));\n\n  return { ...item, data };\n});\n\nconst filterZeroValues = ({ id, data }) => ({\n  id,\n  data: data.filter(({ y }) => y !== 0),\n});\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    const { enableLogScale, enableNormalizeDays } = props;\n    super(props);\n\n    this.state = {\n      logScale: enableLogScale,\n      normalizeDays: !!enableNormalizeDays,\n    };\n  }\n\n  onLogScaleToggle = () => {\n    const { logScale } = this.state;\n\n    this.setState({\n      logScale: !logScale,\n    });\n  }\n\n  onNormalizeDaysToggle = () => {\n    const { normalizeDays } = this.state;\n\n    this.setState({\n      normalizeDays: !normalizeDays,\n    });\n  }\n\n  render() {\n    const {\n      size, data: initialData, enableLogScale, enableNormalizeDays,\n    } = this.props;\n\n    const { logScale, normalizeDays } = this.state;\n\n    let data = initialData;\n    if (normalizeDays) {\n      data = mapNormalizeDays(enableNormalizeDays, data);\n    }\n\n    if (logScale) {\n      // filter zero values\n      data = data.map(filterZeroValues);\n    }\n\n    const dimension = size === 'large'\n      ? { height: '500px', maxWidth: '800px' }\n      : { height: '300px', maxWidth: '500px' };\n\n    const xScale = {\n      type: 'linear',\n      min: normalizeDays ? 0 : 'auto',\n      max: 'auto',\n    };\n\n    const yScale = logScale\n      ? { type: 'log', base: 10, max: 300000 } // todo find max automatically\n      : { type: 'linear', min: 0, max: 'auto' };\n\n    const xFormat = normalizeDays\n      ? undefined\n      : (x) => new Date(x).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n\n    const gridYValues = logScale\n      ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n      : undefined;\n\n    const axisLeftTickValues = logScale\n      ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n      : undefined;\n\n    const axisBottom = {\n      orient: 'bottom',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: -66,\n      tickValues: 10,\n      format: xFormat,\n    };\n\n    const axisLeft = {\n      orient: 'left',\n      tickValues: axisLeftTickValues,\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n    };\n\n    const legend = {\n      anchor: 'right',\n      direction: 'column',\n      justify: false,\n      translateX: 100,\n      translateY: 0,\n      itemsSpacing: 0,\n      itemDirection: 'left-to-right',\n      itemWidth: 80,\n      itemHeight: 20,\n      itemOpacity: 0.75,\n      symbolSize: 12,\n      symbolShape: 'circle',\n      symbolBorderColor: 'rgba(0, 0, 0, .5)',\n      effects: [{\n        on: 'hover',\n        style: {\n          itemBackground: 'rgba(0, 0, 0, .03)',\n          itemOpacity: 1,\n        },\n      }],\n    };\n\n    const logScaleButton = enableLogScale\n      ? (\n        <button type=\"button\" onClick={this.onLogScaleToggle}>\n          {logScale ? 'Linear scale' : 'Log scale'}\n        </button>\n      )\n      : null;\n\n    const normalizeDaysButton = enableNormalizeDays\n      ? (\n        <button type=\"button\" onClick={this.onNormalizeDaysToggle}>\n          {normalizeDays ? 'Absolute timeline' : 'Normalized days'}\n        </button>\n      )\n      : null;\n\n    return (\n      <div style={dimension}>\n        <ResponsiveLine\n          data={data}\n          margin={{\n            top: 50, right: 110, bottom: 50, left: 60,\n          }}\n          xScale={xScale}\n          yScale={yScale}\n          xFormat={xFormat}\n          axisBottom={axisBottom}\n          gridYValues={gridYValues}\n          axisLeft={axisLeft}\n          isInteractive\n    // pointSize={6}\n          useMesh\n          enableGridX={false}\n    // sliceTooltip={(slice) => {\n    //   console.log(slice)\n    //   return <p>foo</p>;\n    // }}\n          enableSlices=\"x\"\n          legends={[legend]}\n        />\n        {logScaleButton}\n        {normalizeDaysButton}\n      </div>\n    );\n  }\n}\n\nLineChart.propTypes = propTypes;\nLineChart.defaultProps = defaultProps;\n\nexport default LineChart;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { ChartData } from '../propTypes';\nimport CountrySelector from '../components/CountrySelector';\nimport LineChart from '../components/LineChart';\n\nconst propTypes = {\n  allCountries: PropTypes.arrayOf(PropTypes.string),\n  filteredCountries: PropTypes.objectOf(PropTypes.bool).isRequired,\n  cases: ChartData,\n  deaths: ChartData,\n  dispatch: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  allCountries: null,\n  cases: null,\n  deaths: null,\n};\n\nconst computeDayOverDayChange = ({ id, data }) => {\n  const changes = data.map(({ x, y }, index) => {\n    const prev = data[index - 1];\n    const change = (index === 0 || prev.y === 0) ? 0 : ((y - prev.y) / prev.y);\n\n    return { x, y: change };\n  });\n\n  return { id, data: changes };\n};\n\nconst filterBeforeDate = (date) => ({ id, data }) => ({\n  id,\n  data: data.filter(({ x }) => x >= new Date(date).getTime()),\n});\n\nfunction GlobalOverview(props) {\n  const {\n    allCountries, filteredCountries, cases, deaths,\n  } = props;\n\n  if (!cases || !deaths) {\n    return <p>loading...</p>;\n  }\n\n  const filteredCases = cases.filter(({ id }) => filteredCountries[id]);\n  const filteredDeaths = deaths.filter(({ id }) => filteredCountries[id]);\n\n  const onFilterToggle = (country) => props.dispatch({\n    type: 'TOGGLE_COUNTRY_FILTER',\n    country,\n  });\n\n  const dayOverDayChangeInCases = filteredCases.map(computeDayOverDayChange).map(filterBeforeDate('3/5/2020'));\n  const dayOverDayChangeInDeaths = filteredDeaths.map(computeDayOverDayChange).map(filterBeforeDate('3/5/2020'));\n\n  const mortalityRate = filteredDeaths.map(({ id, data: deathData }) => {\n    const caseData = filteredCases.find((x) => x.id === id).data;\n\n    const mortalityData = deathData.map(({ x, y: deathCount }, index) => {\n      const caseCount = caseData[index].y;\n      const rate = caseCount === 0 ? 0 : deathCount / caseCount;\n      return { x, y: rate };\n    });\n\n\n    return { id, data: mortalityData };\n  }).map(filterBeforeDate('3/5/2020'));\n\n  return (\n    <div>\n      <CountrySelector\n        filteredCountries={filteredCountries}\n        allCountries={allCountries}\n        onFilterToggle={onFilterToggle}\n      />\n\n      <h3>Global Cases</h3>\n      <p>Overview of coronavirus cases around the world.</p>\n      <LineChart size=\"large\" data={filteredCases} enableLogScale enableNormalizeDays={50} />\n\n      <h3>Global Deaths</h3>\n      <p>Overview of coronavirus deaths around the world.</p>\n      <LineChart size=\"large\" data={filteredDeaths} enableLogScale enableNormalizeDays={10} />\n\n      <h3>Day over day changes</h3>\n      <p>Percent day over day change in cases and deaths around the world;</p>\n      <div>\n        <LineChart size=\"small\" data={dayOverDayChangeInCases} />\n        <LineChart size=\"small\" data={dayOverDayChangeInDeaths} />\n      </div>\n\n      <h3>Mortality Rate</h3>\n      <p>Mortality around the world.</p>\n      <LineChart size=\"large\" data={mortalityRate} />\n    </div>\n  );\n}\n\nGlobalOverview.propTypes = propTypes;\nGlobalOverview.defaultProps = defaultProps;\n\nconst mapStateToProps = ({ global }) => ({\n  cases: global.cases,\n  deaths: global.deaths,\n  allCountries: global.allCountries,\n  filteredCountries: global.filteredCountries,\n});\n\nexport default connect(mapStateToProps)(GlobalOverview);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { ChartData } from '../propTypes';\nimport LineChart from '../components/LineChart';\n\nconst propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.string).isRequired,\n  cases: ChartData,\n  deaths: ChartData,\n};\n\nconst defaultProps = {\n  cases: null,\n  deaths: null,\n};\n\nfunction GlobalOverview(props) {\n  const { countries, cases, deaths } = props;\n\n  if (!cases || !deaths) {\n    return <p>loading...</p>;\n  }\n\n  const filteredCases = cases.filter(({ id }) => countries.includes(id));\n  const filteredDeaths = deaths.filter(({ id }) => countries.includes(id));\n\n  return (\n    <div>\n      <h3>Global Cases</h3>\n      <p>Overview of coronavirus cases around the world.</p>\n      <LineChart size=\"large\" data={filteredCases} enableLogScale />\n\n      <h3>Global Deaths</h3>\n      <p>Overview of coronavirus deaths around the world.</p>\n      <LineChart size=\"large\" data={filteredDeaths} enableLogScale />\n    </div>\n  );\n}\n\nGlobalOverview.propTypes = propTypes;\nGlobalOverview.defaultProps = defaultProps;\n\nconst mapStateToProps = ({ global }) => ({\n  cases: global.cases,\n  deaths: global.deaths,\n  countries: global.filteredCountries,\n});\n\nexport default connect(mapStateToProps)(GlobalOverview);\n","import React from 'react';\nimport { HashRouter, Route, Link } from 'react-router-dom';\n\nimport './App.css';\n\nimport GlobalStats from './pages/GlobalStats';\nimport UnitedStatesStats from './pages/UnitedStatesStats';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <ul>\n          <li><Link to=\"/\">Global</Link></li>\n          <li><Link to=\"/unitedstates\">United States</Link></li>\n        </ul>\n        <hr />\n        <Route exact path=\"/\" component={GlobalStats} />\n        <Route path=\"/unitedstates\" component={UnitedStatesStats} />\n      </div>\n    </HashRouter>\n  );\n}\nexport default App;\n","const BASE_URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series';\n\nexport const GLOBAL_CASES_URL = `${BASE_URL}/time_series_covid19_confirmed_global.csv`;\nexport const GLOBAL_DEATHS_URL = `${BASE_URL}/time_series_covid19_deaths_global.csv`;\n","import parseCsv from 'neat-csv';\nimport { GLOBAL_CASES_URL, GLOBAL_DEATHS_URL } from './const';\n\nconst COLUMNS_TO_DROP = {\n  'Province/State': true,\n  Lat: true,\n  Long: true,\n};\n\nconst COLUMNS_TO_MAP = {\n  'Country/Region': 'id',\n};\n\nconst isDateString = (s) => !isNaN(s);\n// const isDateString = (s) => /\\d{4}-\\d{1,2}-\\d{1,2}/.test(s);\n\nconst csvOptions = ({\n  mapHeaders: ({ header, index }) => { // eslint-disable-line no-unused-vars\n    if (COLUMNS_TO_DROP[header]) return null;\n    if (COLUMNS_TO_MAP[header]) return COLUMNS_TO_MAP[header];\n\n    // m/d/y where month and day can be one or two digits\n    if (/\\d{1,2}\\/\\d{1,2}\\/\\d{2}/.test(header)) {\n      // const [m, d, year] = header.split('/');\n      // TODO: pad month and day to two digits?\n      return new Date(header).getTime();\n    }\n\n    console.warn('Header not transformed:', header); // eslint-disable-line no-console\n\n    return header;\n  },\n  mapValues: ({ header, index, value }) => { // eslint-disable-line no-unused-vars\n    if (isDateString(header)) return parseInt(value, 10);\n\n    if (header === 'id') {\n      switch (value) {\n        case 'Korea, South': return 'S. Korea';\n        case 'Taiwan*': return 'Taiwan';\n        case 'United Kingdom': return 'UK';\n\n        default: return value;\n      }\n    }\n\n    return value;\n  },\n});\n\nconst combineRowsById = (accum, row) => {\n  const prevValue = accum[row.id] || {};\n\n  const dateKeys = Object.keys(row).filter(isDateString);\n\n  const nextValue = dateKeys.reduce((acc, key) => ({\n    ...acc,\n    [key]: row[key] + (prevValue[key] || 0),\n  }), { id: row.id });\n\n  return {\n    ...accum,\n    [row.id]: nextValue,\n  };\n};\n\nconst createDataAray = (row) => {\n  const dateKeys = Object.keys(row).filter(isDateString);\n\n  const data = dateKeys.map((key) => ({\n    x: key,\n    y: row[key],\n  }), []);\n\n  return { id: row.id, data };\n};\n\nconst fetchGlobalData = (url) => fetch(url)\n  .then((res) => res.text())\n  .then((x) => parseCsv(x, csvOptions))\n  .then((csv) => Object.values(csv.reduce(combineRowsById, {}))\n    .map(createDataAray));\n\nexport const fetchGlobalCases = () => (dispatch) => fetchGlobalData(GLOBAL_CASES_URL)\n  .then((rows) => dispatch({\n    type: 'FETCHED_GLOBAL_CASES',\n    values: rows,\n  }));\n\nexport const fetchGlobalDeaths = () => (dispatch) => fetchGlobalData(GLOBAL_DEATHS_URL)\n  .then((rows) => dispatch({\n    type: 'FETCHED_GLOBAL_DEATHS',\n    values: rows,\n  }));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './index.css';\nimport App from './App';\n\nimport { fetchGlobalCases, fetchGlobalDeaths } from './actions/global';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nstore.dispatch(fetchGlobalCases());\nstore.dispatch(fetchGlobalDeaths());\n"],"sourceRoot":""}