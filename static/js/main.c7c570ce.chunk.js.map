{"version":3,"sources":["reducers/global.js","store.js","propTypes.js","components/LineChart.js","pages/GlobalStats.js","pages/UnitedStatesStats.js","App.js","actions/const.js","actions/global.js","index.js"],"names":["INITIAL_STATE","cases","deaths","filteredCountries","reducer","combineReducers","global","state","action","type","values","createStore","applyMiddleware","thunkMiddleware","logger","PropTypes","arrayOf","shape","x","oneOfType","string","number","y","LineChart","props","enableLogScale","enableNormalizeDays","onLogScaleToggle","logScale","setState","onNormalizeDaysToggle","normalizeDays","cutoff","this","size","initialData","data","map","item","filter","index","dimension","height","maxWidth","xScale","min","max","yScale","base","xFormat","undefined","Date","toLocaleDateString","month","day","gridYValues","axisBottom","orient","tickSize","tickPadding","tickRotation","tickValues","format","axisLeft","logScaleButton","onClick","normalizeDaysButton","style","margin","top","right","bottom","left","isInteractive","useMesh","enableGridX","enableSlices","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","React","Component","defaultProps","GlobalOverview","countries","filteredCases","id","includes","filteredDeaths","connect","App","basename","to","exact","path","component","GlobalStats","UnitedStatesStats","BASE_URL","GLOBAL_CASES_URL","GLOBAL_DEATHS_URL","COLUMNS_TO_DROP","Lat","Long","COLUMNS_TO_MAP","isDateString","s","isNaN","csvOptions","mapHeaders","header","test","getTime","console","warn","mapValues","value","parseInt","combineRowsById","accum","row","prevValue","nextValue","Object","keys","reduce","acc","key","createDataAray","d","fetchGlobalData","url","fetch","then","res","text","parseCsv","csv","ReactDOM","render","store","document","getElementById","dispatch","rows"],"mappings":"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","file":"static/js/main.c7c570ce.chunk.js","sourcesContent":["const INITIAL_STATE = {\n  cases: null,\n  deaths: null,\n  filteredCountries: ['Italy', 'US', 'United Kingdom', 'Singapore', 'France', 'Spain', 'Germany', 'Korea, South'],\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case 'FETCHED_GLOBAL_CASES':\n      return {\n        ...state,\n        cases: action.values,\n      };\n\n    case 'FETCHED_GLOBAL_DEATHS':\n      return {\n        ...state,\n        deaths: action.values,\n      };\n\n    default: return state;\n  }\n};\n","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport globalReducer from './reducers/global';\n\nconst reducer = combineReducers({\n  global: globalReducer,\n});\n\nexport default createStore(\n  reducer,\n  applyMiddleware(\n    thunkMiddleware,\n    logger,\n  ),\n);\n","import PropTypes from 'prop-types';\n\nexport const ChartData = PropTypes.arrayOf(\n  PropTypes.shape({\n    x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ResponsiveLine } from '@nivo/line';\n\nimport { ChartData } from '../propTypes';\n\nconst propTypes = {\n  size: PropTypes.oneOf(['small', 'large']).isRequired,\n  data: ChartData.isRequired,\n  enableLogScale: PropTypes.bool,\n  enableNormalizeDays: PropTypes.number,\n};\n\nconst defaultProps = {\n  enableLogScale: false,\n  enableNormalizeDays: null,\n};\n\nconst mapNormalizeDays = (cutoff, values) => values.map((item) => {\n  const data = item.data\n    .filter(({ y }) => y >= cutoff)\n    .map(({ y }, index) => ({ x: index, y }));\n\n  return { ...item, data };\n});\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    const { enableLogScale, enableNormalizeDays } = props;\n    super(props);\n\n    this.state = {\n      logScale: enableLogScale,\n      normalizeDays: !!enableNormalizeDays,\n    };\n  }\n\n  onLogScaleToggle = () => {\n    const { logScale } = this.state;\n\n    this.setState({\n      logScale: !logScale,\n    });\n  }\n\n  onNormalizeDaysToggle = () => {\n    const { normalizeDays } = this.state;\n\n    this.setState({\n      normalizeDays: !normalizeDays,\n    });\n  }\n\n  render() {\n    const {\n      size, data: initialData, enableLogScale, enableNormalizeDays,\n    } = this.props;\n\n    const { logScale, normalizeDays } = this.state;\n\n    const data = normalizeDays ? mapNormalizeDays(enableNormalizeDays, initialData) : initialData;\n\n    const dimension = size === 'large'\n      ? { height: '500px', maxWidth: '800px' }\n      : { height: '300px', maxWidth: '500px' };\n\n    const xScale = {\n      type: 'linear',\n      min: normalizeDays ? 0 : 'auto',\n      max: 'auto',\n    };\n\n    const yScale = logScale\n      ? { type: 'log', base: 10, max: 300000 } // todo find max automatically\n      : { type: 'linear', min: 0, max: 'auto' };\n\n    const xFormat = normalizeDays\n      ? undefined\n      : (x) => new Date(x).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n\n    const gridYValues = logScale\n      ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n      : undefined;\n\n    const axisLeftTickValues = logScale\n      ? [10, 100, 1000, 10000, 100000, 1000000, 10000000]\n      : undefined;\n\n    const axisBottom = {\n      orient: 'bottom',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: -66,\n      tickValues: 10,\n      format: xFormat,\n    };\n\n    const axisLeft = {\n      orient: 'left',\n      tickValues: axisLeftTickValues,\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n    };\n\n    const legend = {\n      anchor: 'right',\n      direction: 'column',\n      justify: false,\n      translateX: 100,\n      translateY: 0,\n      itemsSpacing: 0,\n      itemDirection: 'left-to-right',\n      itemWidth: 80,\n      itemHeight: 20,\n      itemOpacity: 0.75,\n      symbolSize: 12,\n      symbolShape: 'circle',\n      symbolBorderColor: 'rgba(0, 0, 0, .5)',\n      effects: [{\n        on: 'hover',\n        style: {\n          itemBackground: 'rgba(0, 0, 0, .03)',\n          itemOpacity: 1,\n        },\n      }],\n    };\n\n    const logScaleButton = enableLogScale\n      ? (\n        <button type=\"button\" onClick={this.onLogScaleToggle}>\n          {logScale ? 'Linear scale' : 'Log scale'}\n        </button>\n      )\n      : null;\n\n    const normalizeDaysButton = enableNormalizeDays\n      ? (\n        <button type=\"button\" onClick={this.onNormalizeDaysToggle}>\n          {normalizeDays ? 'Absolute timeline' : 'Normalized days'}\n        </button>\n      )\n      : null;\n\n    return (\n      <div style={dimension}>\n        <ResponsiveLine\n          data={data}\n          margin={{\n            top: 50, right: 110, bottom: 50, left: 60,\n          }}\n          xScale={xScale}\n          yScale={yScale}\n          xFormat={xFormat}\n          axisBottom={axisBottom}\n          gridYValues={gridYValues}\n          axisLeft={axisLeft}\n          isInteractive\n    // pointSize={6}\n          useMesh\n          enableGridX={false}\n    // sliceTooltip={(slice) => {\n    //   console.log(slice)\n    //   return <p>foo</p>;\n    // }}\n          enableSlices=\"x\"\n          legends={[legend]}\n        />\n        {logScaleButton}\n        {normalizeDaysButton}\n      </div>\n    );\n  }\n}\n\nLineChart.propTypes = propTypes;\nLineChart.defaultProps = defaultProps;\n\nexport default LineChart;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { ChartData } from '../propTypes';\nimport LineChart from '../components/LineChart';\n\nconst propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.string).isRequired,\n  cases: ChartData,\n  deaths: ChartData,\n};\n\nconst defaultProps = {\n  cases: null,\n  deaths: null,\n};\n\nfunction GlobalOverview(props) {\n  const { countries, cases, deaths } = props;\n\n  if (!cases || !deaths) {\n    return <p>loading...</p>;\n  }\n\n  const filteredCases = cases.filter(({ id }) => countries.includes(id));\n  const filteredDeaths = deaths.filter(({ id }) => countries.includes(id));\n\n  return (\n    <div>\n      <h3>Global Cases</h3>\n      <p>Overview of coronavirus cases around the world.</p>\n      <LineChart size=\"large\" data={filteredCases} enableLogScale enableNormalizeDays={50} />\n\n      <h3>Global Deaths</h3>\n      <p>Overview of coronavirus deaths around the world.</p>\n      <LineChart size=\"large\" data={filteredDeaths} enableLogScale enableNormalizeDays={10} />\n    </div>\n  );\n}\n\nGlobalOverview.propTypes = propTypes;\nGlobalOverview.defaultProps = defaultProps;\n\nconst mapStateToProps = ({ global }) => ({\n  cases: global.cases,\n  deaths: global.deaths,\n  countries: global.filteredCountries,\n});\n\nexport default connect(mapStateToProps)(GlobalOverview);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { ChartData } from '../propTypes';\nimport LineChart from '../components/LineChart';\n\nconst propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.string).isRequired,\n  cases: ChartData,\n  deaths: ChartData,\n};\n\nconst defaultProps = {\n  cases: null,\n  deaths: null,\n};\n\nfunction GlobalOverview(props) {\n  const { countries, cases, deaths } = props;\n\n  if (!cases || !deaths) {\n    return <p>loading...</p>;\n  }\n\n  const filteredCases = cases.filter(({ id }) => countries.includes(id));\n  const filteredDeaths = deaths.filter(({ id }) => countries.includes(id));\n\n  return (\n    <div>\n      <h3>Global Cases</h3>\n      <p>Overview of coronavirus cases around the world.</p>\n      <LineChart size=\"large\" data={filteredCases} enableLogScale />\n\n      <h3>Global Deaths</h3>\n      <p>Overview of coronavirus deaths around the world.</p>\n      <LineChart size=\"large\" data={filteredDeaths} enableLogScale />\n    </div>\n  );\n}\n\nGlobalOverview.propTypes = propTypes;\nGlobalOverview.defaultProps = defaultProps;\n\nconst mapStateToProps = ({ global }) => ({\n  cases: global.cases,\n  deaths: global.deaths,\n  countries: global.filteredCountries,\n});\n\nexport default connect(mapStateToProps)(GlobalOverview);\n","import React from 'react';\nimport { HashRouter, Route, Link } from 'react-router-dom';\n\nimport './App.css';\n\nimport GlobalStats from './pages/GlobalStats';\nimport UnitedStatesStats from './pages/UnitedStatesStats';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <ul>\n          <li><Link to=\"/\">Global</Link></li>\n          <li><Link to=\"/unitedstates\">United States</Link></li>\n        </ul>\n        <hr />\n        <Route exact path=\"/\" component={GlobalStats} />\n        <Route path=\"/unitedstates\" component={UnitedStatesStats} />\n      </div>\n    </HashRouter>\n  );\n}\nexport default App;\n","const BASE_URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series';\n\nexport const GLOBAL_CASES_URL = `${BASE_URL}/time_series_covid19_confirmed_global.csv`;\nexport const GLOBAL_DEATHS_URL = `${BASE_URL}/time_series_covid19_deaths_global.csv`;\n","import parseCsv from 'neat-csv';\nimport { GLOBAL_CASES_URL, GLOBAL_DEATHS_URL } from './const';\n\nconst COLUMNS_TO_DROP = {\n  'Province/State': true,\n  Lat: true,\n  Long: true,\n};\n\nconst COLUMNS_TO_MAP = {\n  'Country/Region': 'id',\n};\n\nconst isDateString = (s) => !isNaN(s);\n// const isDateString = (s) => /\\d{4}-\\d{1,2}-\\d{1,2}/.test(s);\n\nconst csvOptions = ({\n  mapHeaders: ({ header, index }) => { // eslint-disable-line no-unused-vars\n    if (COLUMNS_TO_DROP[header]) return null;\n    if (COLUMNS_TO_MAP[header]) return COLUMNS_TO_MAP[header];\n\n    // m/d/y where month and day can be one or two digits\n    if (/\\d{1,2}\\/\\d{1,2}\\/\\d{2}/.test(header)) {\n      // const [m, d, year] = header.split('/');\n      // TODO: pad month and day to two digits?\n      return new Date(header).getTime();\n    }\n\n    console.warn('Header not transformed:', header); // eslint-disable-line no-console\n\n    return header;\n  },\n  mapValues: ({ header, index, value }) => { // eslint-disable-line no-unused-vars\n    if (isDateString(header)) return parseInt(value, 10);\n\n    return value;\n  },\n});\n\nconst combineRowsById = (accum, row) => {\n  const prevValue = accum[row.id] || {};\n\n  const dateKeys = Object.keys(row).filter(isDateString);\n\n  const nextValue = dateKeys.reduce((acc, key) => ({\n    ...acc,\n    [key]: row[key] + (prevValue[key] || 0),\n  }), { id: row.id });\n\n  return {\n    ...accum,\n    [row.id]: nextValue,\n  };\n};\n\nconst createDataAray = (row) => {\n  const dateKeys = Object.keys(row).filter(isDateString);\n\n  const data = dateKeys.map((key) => ({\n    x: key,\n    y: row[key],\n  }), []).filter((d) => d.y !== 0); // filter zero values\n    // TODO: this is required for log scale, are zero values useful elsewhere?\n\n  return { id: row.id, data };\n};\n\nconst fetchGlobalData = (url) => fetch(url)\n  .then((res) => res.text())\n  .then((x) => parseCsv(x, csvOptions))\n  .then((csv) => Object.values(csv.reduce(combineRowsById, {}))\n    .map(createDataAray));\n\nexport const fetchGlobalCases = () => (dispatch) => fetchGlobalData(GLOBAL_CASES_URL)\n  .then((rows) => dispatch({\n    type: 'FETCHED_GLOBAL_CASES',\n    values: rows,\n  }));\n\nexport const fetchGlobalDeaths = () => (dispatch) => fetchGlobalData(GLOBAL_DEATHS_URL)\n  .then((rows) => dispatch({\n    type: 'FETCHED_GLOBAL_DEATHS',\n    values: rows,\n  }));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './index.css';\nimport App from './App';\n\nimport { fetchGlobalCases, fetchGlobalDeaths } from './actions/global';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nstore.dispatch(fetchGlobalCases());\nstore.dispatch(fetchGlobalDeaths());\n"],"sourceRoot":""}